use crate::ast::*;

grammar;

Comma<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// TODO: Unify this with Comma, and keep track of weather we have a trailing semi (if we want that)
Semi<T>: Vec<T> = { 
    <v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Function: Function<'input> = {
    "fn" <name:Name> <args:Args> <ret:("->" <Type> )?> <body:Body> => Function{<>}
}

Args = { "(" <Comma<Arg>> ")"  }

Arg: Arg<'input> = { <name:Name> ":" <ty:Type> => Arg{<>} }

Type: Type = {
    "int" => Type::Int,
    "bool" => Type::Bool,
    "string" => Type::String,
}

Name = { r"[a-z]+" }

Body = { "{" <Semi<Stmt>> "}" }

Stmt: Stmt<'input> = {
    <Expr> => Stmt::Expr(<>),
    "let" <Name> "=" <Expr> => Stmt::Let(<>)

}

Expr: Expr<'input> = {
    Name => Expr::Var(<>),
    Body => Expr::Block(<>)
}