// auto-generated: "lalrpop 0.19.5"
// sha3: 4c5ddd3efb83a8bf35eb50c15e8d434a3e153dce7adf15f648a38e2effda3bd0
use crate::ast::*;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate alloc;
extern crate core;

mod __parse__Expr {
    #![allow(
        non_snake_case,
        non_camel_case_types,
        unused_mut,
        unused_variables,
        unused_imports,
        unused_parens
    )]

    use crate::ast::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate alloc;
    extern crate core;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input> {
        Variant0(&'input str),
        Variant1(Spanned<Type>),
        Variant2(core::option::Option<Spanned<Type>>),
        Variant3(Vec<Stmt<'input>>),
        Variant4(core::option::Option<Vec<Stmt<'input>>>),
        Variant5(Arg<'input>),
        Variant6(alloc::vec::Vec<Arg<'input>>),
        Variant7(Expr<'input>),
        Variant8(alloc::vec::Vec<Expr<'input>>),
        Variant9(Stmt<'input>),
        Variant10(alloc::vec::Vec<Stmt<'input>>),
        Variant11(usize),
        Variant12(BinOp),
        Variant13(core::option::Option<Arg<'input>>),
        Variant14(Vec<Arg<'input>>),
        Variant15(Box<Expr<'input>>),
        Variant16(bool),
        Variant17(Vec<Expr<'input>>),
        Variant18(core::option::Option<Expr<'input>>),
        Variant19(Function<'input>),
        Variant20(Item<'input>),
        Variant21(alloc::vec::Vec<Item<'input>>),
        Variant22(Literal<'input>),
        Variant23(Program<'input>),
        Variant24(Spanned<Vec<Arg<'input>>>),
        Variant25(Spanned<Vec<Stmt<'input>>>),
        Variant26(Spanned<Function<'input>>),
        Variant27(Spanned<&'input str>),
        Variant28(core::option::Option<Stmt<'input>>),
        Variant29(Type),
        Variant30(UnaryOp),
    }
    const __ACTION: &[i16] = &[
        // State 0
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 1
        0, -26, -26, 0, -26, 0, 61, -26, 62, 0, 0, 0, 0, -26, -26, -26, 0, -26, -26, -26, 0, -26,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, 0, 0, 0, 0, // State 2
        0, -52, -52, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, -52, 67, 68, 0, -52, 69, 70, 0, -52, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, -52, 0, 0, 0, 0, // State 3
        0, 73, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, 0, -58, 0, 0, 0, 74, 0, 0, 0, -58, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, 0, 0, 0, // State 4
        0, 0, 75, 0, -27, 0, 0, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, -27, 0, 0, 0, 0, // State 5
        0, 0, 0, 0, -90, 0, 0, -90, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -90, 76, -90, 0, 0, 0, 0, // State 6
        0, -87, -87, 0, -87, 79, -87, -87, -87, 0, 0, 80, 0, -87, -87, -87, 0, -87, -87, -87, 0,
        -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, -87, -87, 0, 0, 0, 0,
        // State 7
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 8
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, // State 10
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 11
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 12
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 26, 27, 28, 0, 54, 12, 13, 0, -99, 55, 56, 57, 58, // State 13
        51, 0, 0, 9, -49, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11,
        0, 0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, // State 15
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 16
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 17
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 18
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 19
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 20
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 21
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, // State 24
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 26, 27, 28, 0, 54, 12, 13, 0, -101, 55, 56, 57, 58, // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, // State 26
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 27
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 28
        51, 0, 0, 9, -51, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11,
        0, 0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 29
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, // State 32
        51, 0, 0, 9, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 54, 12, 13, 0, 0, 55, 56, 57, 58, // State 33
        0, -117, -117, 0, -117, 0, 0, -117, 0, 0, 0, 0, 0, -117, -117, -117, 0, -117, -117, -117,
        0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, -117, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, -123, 0, 0, -123, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -123, -123, -123, 0, 0, 0, 0, // State 35
        0, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92, -92, 0, -92, -92, -92, 0, -92, -92, -92,
        -92, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, -92, 0, 0, 0, 0,
        // State 36
        0, -38, -38, -38, -38, -38, -38, -38, -38, 0, -38, -38, 0, -38, -38, -38, 0, -38, -38, -38,
        -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, -38, 0, 0, 0, 0,
        // State 37
        0, -81, -81, -81, -81, -81, -81, -81, -81, 0, -81, -81, 0, -81, -81, -81, 0, -81, -81, -81,
        -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, -81, 0, 0, 0, 0,
        // State 38
        0, -119, -119, 0, -119, 0, 0, -119, 0, 0, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, -119, 0, 0, 0, 0, // State 39
        0, 0, -121, 0, -121, 0, 0, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, -121, -121, 0, 0, 0, 0, // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 41
        0, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79, -79, 0, -79, -79, -79, 0, -79, -79, -79,
        -79, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, -79, 0, 0, 0, 0,
        // State 42
        0, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80, -80, 0, -80, -80, -80, 0, -80, -80, -80,
        -80, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, -80, 0, 0, 0, 0,
        // State 43
        0, -40, -40, -40, -40, -40, -40, -40, -40, 0, -40, -40, 0, -40, -40, -40, 0, -40, -40, -40,
        -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, -40, 0, 0, 0, 0,
        // State 44
        0, -115, -115, 0, -115, 0, -115, -115, -115, 0, 0, 0, 0, -115, -115, -115, 0, -115, -115,
        -115, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, 0, 0, 0, 0,
        // State 45
        0, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, 0, -37, -37, -37, 0, -37, -37, -37,
        -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, -37, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -62, 0, -62, 0, 0, 0, 0, // State 47
        0, -130, -130, 14, -130, -130, -130, -130, -130, 0, 15, -130, 0, -130, -130, -130, 0, -130,
        -130, -130, 16, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, -130, -130, 0, 0, 0,
        0, // State 48
        0, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78, -78, 0, -78, -78, -78, 0, -78, -78, -78,
        -78, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, -78, 0, 0, 0, 0,
        // State 49
        0, -125, -125, 0, -125, -125, -125, -125, -125, 0, 0, -125, 0, -125, -125, -125, 0, -125,
        -125, -125, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, -125, 0, 0, 0,
        0, // State 50
        -132, 0, 0, -132, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0,
        -132, -132, 0, 0, 0, 0, 0, 0, -132, -132, -132, 0, 0, -132, -132, -132, -132,
        // State 51
        -133, 0, 0, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0,
        -133, -133, 0, 0, 0, 0, 0, 0, -133, -133, -133, 0, 0, -133, -133, -133, -133,
        // State 52
        0, -43, -43, -43, -43, -43, -43, -43, -43, 0, -43, -43, 0, -43, -43, -43, 0, -43, -43, -43,
        -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, -43, 0, 0, 0, 0,
        // State 53
        0, -42, -42, -42, -42, -42, -42, -42, -42, 0, -42, -42, 0, -42, -42, -42, 0, -42, -42, -42,
        -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, 0, 0, 0, 0,
        // State 54
        0, -113, -113, -113, -113, -113, -113, -113, -113, 0, -113, -113, 0, -113, -113, -113, 0,
        -113, -113, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113,
        0, 0, 0, 0, // State 55
        0, -65, -65, -65, -65, -65, -65, -65, -65, 0, -65, -65, 0, -65, -65, -65, 0, -65, -65, -65,
        -65, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, -65, 0, 0, 0, 0,
        // State 56
        0, -70, -70, -70, -70, -70, -70, -70, -70, 0, -70, -70, 0, -70, -70, -70, 0, -70, -70, -70,
        -70, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, -70, 0, 0, 0, 0,
        // State 57
        0, -88, -88, -88, -88, -88, -88, -88, -88, 0, -88, -88, 0, -88, -88, -88, -88, -88, -88,
        -88, -88, -88, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, -88, -88, -88, 0, 0, 0, 0,
        // State 58
        -25, 0, 0, -25, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, -25,
        -25, 0, 0, 0, 0, 0, 0, -25, -25, -25, 0, 0, -25, -25, -25, -25, // State 59
        -24, 0, 0, -24, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24,
        -24, 0, 0, 0, 0, 0, 0, -24, -24, -24, 0, 0, -24, -24, -24, -24, // State 60
        -91, 0, 0, -91, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91,
        -91, 0, 0, 0, 0, 0, 0, -91, -91, -91, 0, 0, -91, -91, -91, -91, // State 61
        -84, 0, 0, -84, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, -84,
        -84, 0, 0, 0, 0, 0, 0, -84, -84, -84, 0, 0, -84, -84, -84, -84, // State 62
        -54, 0, 0, -54, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, -54,
        -54, 0, 0, 0, 0, 0, 0, -54, -54, -54, 0, 0, -54, -54, -54, -54, // State 63
        -56, 0, 0, -56, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, -56,
        -56, 0, 0, 0, 0, 0, 0, -56, -56, -56, 0, 0, -56, -56, -56, -56, // State 64
        -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, -53,
        -53, 0, 0, 0, 0, 0, 0, -53, -53, -53, 0, 0, -53, -53, -53, -53, // State 65
        -55, 0, 0, -55, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, -55,
        -55, 0, 0, 0, 0, 0, 0, -55, -55, -55, 0, 0, -55, -55, -55, -55, // State 66
        -76, 0, 0, -76, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76,
        -76, 0, 0, 0, 0, 0, 0, -76, -76, -76, 0, 0, -76, -76, -76, -76, // State 67
        -77, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, -77,
        -77, 0, 0, 0, 0, 0, 0, -77, -77, -77, 0, 0, -77, -77, -77, -77, // State 68
        -68, 0, 0, -68, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, -68,
        -68, 0, 0, 0, 0, 0, 0, -68, -68, -68, 0, 0, -68, -68, -68, -68, // State 69
        -69, 0, 0, -69, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, -69,
        -69, 0, 0, 0, 0, 0, 0, -69, -69, -69, 0, 0, -69, -69, -69, -69, // State 70
        -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, -59,
        -59, 0, 0, 0, 0, 0, 0, -59, -59, -59, 0, 0, -59, -59, -59, -59, // State 71
        -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, -60,
        -60, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, 0, -60, -60, -60, -60, // State 72
        -89, 0, 0, -89, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89,
        -89, 0, 0, 0, 0, 0, 0, -89, -89, -89, 0, 0, -89, -89, -89, -89, // State 73
        -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, -61,
        -61, 0, 0, 0, 0, 0, 0, -61, -61, -61, 0, 0, -61, -61, -61, -61, // State 74
        -82, 0, 0, -82, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82,
        -82, 0, 0, 0, 0, 0, 0, -82, -82, -82, 0, 0, -82, -82, -82, -82, // State 75
        -83, 0, 0, -83, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, -83,
        -83, 0, 0, 0, 0, 0, 0, -83, -83, -83, 0, 0, -83, -83, -83, -83, // State 76
        -86, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86,
        -86, 0, 0, 0, 0, 0, 0, -86, -86, -86, 0, 0, -86, -86, -86, -86, // State 77
        -85, 0, 0, -85, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85,
        -85, 0, 0, 0, 0, 0, 0, -85, -85, -85, 0, 0, -85, -85, -85, -85, // State 78
        -126, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0,
        -126, -126, 0, 0, 0, 0, 0, 0, -126, -126, -126, 0, 0, -126, -126, -126, -126,
        // State 79
        -57, 0, 0, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, -57,
        -57, 0, 0, 0, 0, 0, 0, -57, -57, -57, 0, 0, -57, -57, -57, -57, // State 80
        0, -131, -131, 0, -131, -131, -131, -131, -131, 0, 0, -131, 0, -131, -131, -131, 0, -131,
        -131, -131, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -131, -131, 0, 0, 0,
        0, // State 81
        0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, // State 87
        0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 88
        0, 0, 0, 0, -48, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 89
        0, -95, -95, -95, -95, -95, -95, -95, -95, 0, -95, -95, 0, -95, -95, -95, 0, -95, -95, -95,
        -95, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, -95, -95, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 91
        0, -114, -114, 0, -114, 0, -114, -114, -114, 0, 0, 0, 0, -114, -114, -114, 0, -114, -114,
        -114, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, 0, 0, 0, 0,
        // State 92
        0, -116, -116, 0, -116, 0, 0, -116, 0, 0, 0, 0, 0, -116, -116, -116, 0, -116, -116, -116, 0,
        -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, 0, 0, 0, 0,
        // State 93
        0, -118, -118, 0, -118, 0, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, -118, 0, 0, 0, 0, // State 94
        0, 0, -120, 0, -120, 0, 0, -120, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0, 0, 0, // State 95
        0, 0, 0, 0, -122, 0, 0, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, -122, 0, 0, 0, 0, // State 96
        0, -124, -124, 0, -124, -124, -124, -124, -124, 0, 0, -124, 0, -124, -124, -124, 0, -124,
        -124, -124, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, -124, 0, 0, 0,
        0, // State 97
        0, -39, -39, -39, -39, -39, -39, -39, -39, 0, -39, -39, 0, -39, -39, -39, 0, -39, -39, -39,
        -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -39, -39, 0, 0, 0, 0,
        // State 98
        0, -34, -34, -34, -34, -34, -34, -34, -34, 0, -34, -34, 0, -34, -34, -34, 0, -34, -34, -34,
        -34, -34, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, -34, -34, 0, 0, 0, 0,
        // State 99
        0, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, -36, 0, -36, -36, -36, 0, -36, -36, -36,
        -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36, -36, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, // State 101
        0, -41, -41, -41, -41, -41, -41, -41, -41, 0, -41, -41, 0, -41, -41, -41, 0, -41, -41, -41,
        -41, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41, -41, 0, 0, 0, 0,
        // State 102
        -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20,
        -20, 0, 0, -20, -20, -20, 0, -20, -20, -20, 0, -20, -20, -20, -20, -20,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, // State 106
        0, 0, 0, 0, -50, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 107
        0, -94, -94, -94, -94, -94, -94, -94, -94, 0, -94, -94, 0, -94, -94, -94, 0, -94, -94, -94,
        -94, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, -94, 0, 0, 0, 0,
        // State 108
        -15, 0, 0, -15, -15, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15,
        -15, 0, 0, 0, 0, 0, 0, -15, -15, -15, 0, 0, -15, -15, -15, -15, // State 109
        0, -93, -93, -93, -93, -93, -93, -93, -93, 0, -93, -93, 0, -93, -93, -93, 0, -93, -93, -93,
        -93, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, -93, 0, 0, 0, 0,
        // State 110
        -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21,
        -21, 0, 0, -21, -21, -21, 0, -21, -21, -21, 0, -21, -21, -21, -21, -21,
        // State 111
        -16, 0, 0, -16, -16, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, -16,
        -16, 0, 0, 0, 0, 0, 0, -16, -16, -16, 0, 0, -16, -16, -16, -16, // State 112
        0, -35, -35, -35, -35, -35, -35, -35, -35, 0, -35, -35, 0, -35, -35, -35, 0, -35, -35, -35,
        -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -35, 0, 0, 0, 0,
        // State 113
        0, -33, -33, -33, -33, -33, -33, -33, -33, 0, -33, -33, 0, -33, -33, -33, 0, -33, -33, -33,
        -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -33, -33, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 43 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,    // State 1
        -26,  // State 2
        -52,  // State 3
        -58,  // State 4
        -27,  // State 5
        -90,  // State 6
        -87,  // State 7
        0,    // State 8
        0,    // State 9
        0,    // State 10
        0,    // State 11
        0,    // State 12
        0,    // State 13
        0,    // State 14
        0,    // State 15
        0,    // State 16
        0,    // State 17
        0,    // State 18
        0,    // State 19
        0,    // State 20
        0,    // State 21
        0,    // State 22
        0,    // State 23
        0,    // State 24
        0,    // State 25
        0,    // State 26
        0,    // State 27
        0,    // State 28
        0,    // State 29
        0,    // State 30
        0,    // State 31
        0,    // State 32
        0,    // State 33
        -117, // State 34
        -123, // State 35
        -92,  // State 36
        -38,  // State 37
        -81,  // State 38
        -119, // State 39
        -121, // State 40
        -134, // State 41
        -79,  // State 42
        -80,  // State 43
        -40,  // State 44
        -115, // State 45
        -37,  // State 46
        -62,  // State 47
        -130, // State 48
        -78,  // State 49
        -125, // State 50
        0,    // State 51
        0,    // State 52
        -43,  // State 53
        -42,  // State 54
        -113, // State 55
        -65,  // State 56
        -70,  // State 57
        -88,  // State 58
        0,    // State 59
        0,    // State 60
        0,    // State 61
        0,    // State 62
        0,    // State 63
        0,    // State 64
        0,    // State 65
        0,    // State 66
        0,    // State 67
        0,    // State 68
        0,    // State 69
        0,    // State 70
        0,    // State 71
        0,    // State 72
        0,    // State 73
        0,    // State 74
        0,    // State 75
        0,    // State 76
        0,    // State 77
        0,    // State 78
        0,    // State 79
        0,    // State 80
        -131, // State 81
        0,    // State 82
        0,    // State 83
        0,    // State 84
        0,    // State 85
        0,    // State 86
        0,    // State 87
        0,    // State 88
        0,    // State 89
        -95,  // State 90
        0,    // State 91
        -114, // State 92
        -116, // State 93
        -118, // State 94
        -120, // State 95
        -122, // State 96
        -124, // State 97
        -39,  // State 98
        -34,  // State 99
        -36,  // State 100
        0,    // State 101
        -41,  // State 102
        0,    // State 103
        0,    // State 104
        0,    // State 105
        0,    // State 106
        0,    // State 107
        -94,  // State 108
        0,    // State 109
        -93,  // State 110
        0,    // State 111
        0,    // State 112
        -35,  // State 113
        -33,  // State 114
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            9 => 28,
            12 => 24,
            15 => 16,
            16 => match state {
                17 => 92,
                _ => 33,
            },
            17 => match state {
                20 => 95,
                _ => 34,
            },
            21 => match state {
                11 => 23,
                29 => 30,
                _ => 22,
            },
            22 => 35,
            23 => match state {
                22 => 98,
                23 => 99,
                30 => 112,
                31 => 113,
                _ => 36,
            },
            24 => 37,
            26 => 87,
            27 => match state {
                18 => 93,
                _ => 38,
            },
            28 => 17,
            29 => 76,
            30 => match state {
                19 => 94,
                _ => 39,
            },
            31 => 18,
            32 => 70,
            33 => match state {
                0 => 40,
                8 => 81,
                12 | 24 => 84,
                13 => 88,
                15 => 90,
                26 => 104,
                27 => 105,
                28 => 106,
                32 => 114,
                _ => 83,
            },
            35 => 41,
            37 => 62,
            38 => 63,
            39 => 42,
            43 => 64,
            44 => 65,
            45 => 43,
            46 => 19,
            47 => 20,
            48 => 58,
            49 => 21,
            50 => match state {
                16 => 91,
                _ => 44,
            },
            51 => match state {
                9 => 82,
                14 => 89,
                25 => 103,
                _ => 45,
            },
            52 => 71,
            53 => 46,
            54 => 59,
            55 => 47,
            57 => 85,
            63 => match state {
                24 => 100,
                _ => 86,
            },
            65 => 48,
            66 => 1,
            67 => 2,
            68 => 3,
            69 => 4,
            70 => 5,
            71 => 6,
            72 => 77,
            74 => match state {
                7 => 80,
                21 => 96,
                _ => 49,
            },
            75 => 7,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""[""###,
            r###""]""###,
            r###""bool""###,
            r###""else""###,
            r###""false""###,
            r###""fn""###,
            r###""for""###,
            r###""if""###,
            r###""in""###,
            r###""int""###,
            r###""let""###,
            r###""print""###,
            r###""return""###,
            r###""string""###,
            r###""true""###,
            r###""while""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"r#"\"(\\\\.|[^\"\\\\])*\""#"###,
            r###"r#"[+-]?[0-9]+[.][0-9]*"#"###,
            r###"r#"[0-9]+"#"###,
            r###"r#"[a-zA-Z][a-zA-Z0-9_]*"#"###,
        ];
        __TERMINAL
            .iter()
            .enumerate()
            .filter_map(|(index, terminal)| {
                let next_state = __action(__state, index);
                if next_state == 0 {
                    None
                } else {
                    Some(alloc::string::ToString::to_string(terminal))
                }
            })
            .collect()
    }
    pub(crate) struct __StateMachine<'input> {
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input> {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Expr<'input>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
            Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
            0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 43 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<'input>(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize> {
        match *__token {
            Token(4, _) if true => Some(0),
            Token(5, _) if true => Some(1),
            Token(6, _) if true => Some(2),
            Token(7, _) if true => Some(3),
            Token(8, _) if true => Some(4),
            Token(9, _) if true => Some(5),
            Token(10, _) if true => Some(6),
            Token(11, _) if true => Some(7),
            Token(12, _) if true => Some(8),
            Token(13, _) if true => Some(9),
            Token(14, _) if true => Some(10),
            Token(15, _) if true => Some(11),
            Token(16, _) if true => Some(12),
            Token(17, _) if true => Some(13),
            Token(18, _) if true => Some(14),
            Token(19, _) if true => Some(15),
            Token(20, _) if true => Some(16),
            Token(21, _) if true => Some(17),
            Token(22, _) if true => Some(18),
            Token(23, _) if true => Some(19),
            Token(24, _) if true => Some(20),
            Token(25, _) if true => Some(21),
            Token(26, _) if true => Some(22),
            Token(27, _) if true => Some(23),
            Token(28, _) if true => Some(24),
            Token(29, _) if true => Some(25),
            Token(30, _) if true => Some(26),
            Token(31, _) if true => Some(27),
            Token(32, _) if true => Some(28),
            Token(33, _) if true => Some(29),
            Token(34, _) if true => Some(30),
            Token(35, _) if true => Some(31),
            Token(36, _) if true => Some(32),
            Token(37, _) if true => Some(33),
            Token(38, _) if true => Some(34),
            Token(39, _) if true => Some(35),
            Token(40, _) if true => Some(36),
            Token(41, _) if true => Some(37),
            Token(42, _) if true => Some(38),
            Token(0, _) if true => Some(39),
            Token(1, _) if true => Some(40),
            Token(2, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            _ => None,
        }
    }
    fn __token_to_symbol<'input>(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input> {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18
            | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34
            | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 => match __token {
                Token(4, __tok0)
                | Token(5, __tok0)
                | Token(6, __tok0)
                | Token(7, __tok0)
                | Token(8, __tok0)
                | Token(9, __tok0)
                | Token(10, __tok0)
                | Token(11, __tok0)
                | Token(12, __tok0)
                | Token(13, __tok0)
                | Token(14, __tok0)
                | Token(15, __tok0)
                | Token(16, __tok0)
                | Token(17, __tok0)
                | Token(18, __tok0)
                | Token(19, __tok0)
                | Token(20, __tok0)
                | Token(21, __tok0)
                | Token(22, __tok0)
                | Token(23, __tok0)
                | Token(24, __tok0)
                | Token(25, __tok0)
                | Token(26, __tok0)
                | Token(27, __tok0)
                | Token(28, __tok0)
                | Token(29, __tok0)
                | Token(30, __tok0)
                | Token(31, __tok0)
                | Token(32, __tok0)
                | Token(33, __tok0)
                | Token(34, __tok0)
                | Token(35, __tok0)
                | Token(36, __tok0)
                | Token(37, __tok0)
                | Token(38, __tok0)
                | Token(39, __tok0)
                | Token(40, __tok0)
                | Token(41, __tok0)
                | Token(42, __tok0)
                | Token(0, __tok0)
                | Token(1, __tok0)
                | Token(2, __tok0)
                | Token(3, __tok0)
                    if true =>
                {
                    __Symbol::Variant0(__tok0)
                }
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct ExprParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl ExprParser {
        pub fn new() -> ExprParser {
            let __builder = super::__intern_token::new_builder();
            ExprParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<'input>(
            &self,
            input: &'input str,
        ) -> Result<Expr<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<'input>(
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Expr<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => __reduce0(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            1 => __reduce1(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            2 => __reduce2(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            3 => __reduce3(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            4 => __reduce4(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            5 => __reduce5(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            6 => __reduce6(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            7 => __reduce7(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            8 => __reduce8(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            9 => __reduce9(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            10 => __reduce10(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            11 => __reduce11(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            12 => __reduce12(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            13 => __reduce13(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            14 => __reduce14(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            15 => __reduce15(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            16 => __reduce16(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            17 => __reduce17(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            18 => __reduce18(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            19 => __reduce19(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            20 => __reduce20(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            21 => __reduce21(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            22 => __reduce22(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            23 => __reduce23(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            24 => __reduce24(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            25 => __reduce25(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            26 => __reduce26(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            27 => __reduce27(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            28 => __reduce28(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            29 => __reduce29(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            30 => __reduce30(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            31 => __reduce31(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            32 => __reduce32(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            33 => __reduce33(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            34 => __reduce34(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            35 => __reduce35(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            36 => __reduce36(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            37 => __reduce37(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            38 => __reduce38(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            39 => __reduce39(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            40 => __reduce40(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            41 => __reduce41(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            42 => __reduce42(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            43 => __reduce43(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            44 => __reduce44(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            45 => __reduce45(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            46 => __reduce46(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            47 => __reduce47(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            48 => __reduce48(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            49 => __reduce49(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            50 => __reduce50(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            51 => __reduce51(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            52 => __reduce52(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            53 => __reduce53(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            54 => __reduce54(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            55 => __reduce55(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            56 => __reduce56(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            57 => __reduce57(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            58 => __reduce58(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            59 => __reduce59(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            60 => __reduce60(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            61 => __reduce61(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            62 => __reduce62(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            63 => __reduce63(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            64 => __reduce64(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            65 => __reduce65(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            66 => __reduce66(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            67 => __reduce67(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            68 => __reduce68(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            69 => __reduce69(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            70 => __reduce70(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            71 => __reduce71(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            72 => __reduce72(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            73 => __reduce73(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            74 => __reduce74(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            75 => __reduce75(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            76 => __reduce76(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            77 => __reduce77(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            78 => __reduce78(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            79 => __reduce79(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            80 => __reduce80(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            81 => __reduce81(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            82 => __reduce82(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            83 => __reduce83(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            84 => __reduce84(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            85 => __reduce85(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            86 => __reduce86(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            87 => __reduce87(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            88 => __reduce88(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            89 => __reduce89(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            90 => __reduce90(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            91 => __reduce91(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            92 => __reduce92(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            93 => __reduce93(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            94 => __reduce94(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            95 => __reduce95(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            96 => __reduce96(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            97 => __reduce97(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            98 => __reduce98(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            99 => __reduce99(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            100 => __reduce100(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            101 => __reduce101(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            102 => __reduce102(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            103 => __reduce103(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            104 => __reduce104(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            105 => __reduce105(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            106 => __reduce106(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            107 => __reduce107(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            108 => __reduce108(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            109 => __reduce109(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            110 => __reduce110(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            111 => __reduce111(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            112 => __reduce112(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            113 => __reduce113(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            114 => __reduce114(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            115 => __reduce115(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            116 => __reduce116(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            117 => __reduce117(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            118 => __reduce118(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            119 => __reduce119(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            120 => __reduce120(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            121 => __reduce121(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            122 => __reduce122(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            123 => __reduce123(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            124 => __reduce124(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            125 => __reduce125(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            126 => __reduce126(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            127 => __reduce127(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            128 => __reduce128(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            129 => __reduce129(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            130 => __reduce130(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            131 => __reduce131(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            132 => __reduce132(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            133 => {
                // __Expr = Expr => ActionFn(4);
                let __sym0 = __pop_Variant7(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action4(input, __sym0);
                return Some(Ok(__nt));
            }
            134 => __reduce134(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            135 => __reduce135(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            136 => __reduce136(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            137 => __reduce137(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            _ => panic!("invalid action code {}", __action),
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant5<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Arg<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant12<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, BinOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant15<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Box<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant7<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Expr<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant19<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Function<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant20<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Item<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant22<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Literal<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant23<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Program<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant26<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Function<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant1<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Type>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant24<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Arg<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant25<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant27<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<&'input str>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant9<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Stmt<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant29<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Type, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant30<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, UnaryOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant14<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant17<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant3<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant6<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant8<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant21<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Item<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant10<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant16<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, bool, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant13<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant18<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant2<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Spanned<Type>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant28<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant4<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant11<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, usize, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant0<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, &'input str, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    pub(crate) fn __reduce0<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>) = "->", Spaned<Type> => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? = "->", Spaned<Type> => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? =  => ActionFn(93);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action93(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>) = "else", Body => ActionFn(75);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action75(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? = "else", Body => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action129(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce5<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? =  => ActionFn(74);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action74(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",") = Arg, "," => ActionFn(109);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action109(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* =  => ActionFn(107);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action107(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* = (<Arg> ",")+ => ActionFn(108);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = Arg, "," => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce10<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = (<Arg> ",")+, Arg, "," => ActionFn(133);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action133(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 6)
    }
    pub(crate) fn __reduce11<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",") = Expr, "," => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action119(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* =  => ActionFn(117);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action117(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce13<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* = (<Expr> ",")+ => ActionFn(118);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = Expr, "," => ActionFn(136);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action136(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce15<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 9)
    }
    pub(crate) fn __reduce16<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";") = Stmt, ";" => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* =  => ActionFn(112);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action112(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce18<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* = (<Stmt> ";")+ => ActionFn(113);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = Stmt, ";" => ActionFn(140);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action140(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce20<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = (<Stmt> ";")+, Stmt, ";" => ActionFn(141);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action141(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce21<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @L =  => ActionFn(104);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action104(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce22<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @R =  => ActionFn(103);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action103(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 14)
    }
    pub(crate) fn __reduce23<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Plus => ActionFn(67);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce24<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Minus => ActionFn(68);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce25<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditiveExpr = Tier<AdditionOp, MultiplicitveExpr> => ActionFn(25);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce26<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AndExpr = Tier<LogicalAnd, EqualityExpr> => ActionFn(22);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce27<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg = Name, ":", Type => ActionFn(9);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action9(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce28<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? = Arg => ActionFn(105);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105(input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce29<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? =  => ActionFn(106);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce30<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Args = "(", Comma<Arg>, ")" => ActionFn(8);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action8(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce31<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BExpr = Expr => ActionFn(20);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20(input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce32<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body, "else", Body => ActionFn(130);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action130(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce33<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce34<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "for", Name, "in", BExpr, Body => ActionFn(34);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant15(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action34(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce35<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "while", BExpr, Body => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action35(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce36<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Name => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce37<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Body => ActionFn(37);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce38<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "(", Expr, ")" => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action38(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce39<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Literal => ActionFn(39);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Body = "{", Semi<Stmt>, "}" => ActionFn(14);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action14(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce41<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "true" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "false" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce43<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = Arg => ActionFn(154);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action154(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce44<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> =  => ActionFn(155);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action155(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce45<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+, Arg => ActionFn(156);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action156(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce46<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+ => ActionFn(157);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce47<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = Expr => ActionFn(158);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action158(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce48<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> =  => ActionFn(159);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action159(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce49<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+, Expr => ActionFn(160);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action160(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce50<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+ => ActionFn(161);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action161(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonExpr = Tier<ComparisonOp, AdditiveExpr> => ActionFn(24);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce52<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThan => ActionFn(63);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce53<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThan => ActionFn(64);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce54<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThanEquals => ActionFn(65);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce55<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThanEquals => ActionFn(66);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce56<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Devide = "/" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce57<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityExpr = Tier<EqualityOp, ComparisonExpr> => ActionFn(23);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce58<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = Equals => ActionFn(61);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce59<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = NotEquals => ActionFn(62);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce60<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Equals = "==" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce61<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr = OrExpr => ActionFn(19);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce62<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? = Expr => ActionFn(115);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115(input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce63<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? =  => ActionFn(116);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce64<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // FloatLit = r#"[+-]?[0-9]+[.][0-9]*"# => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce65<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, "->", Spaned<Type>, Spaned<Body> => ActionFn(127);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant25(__symbols);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action127(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (6, 36)
    }
    pub(crate) fn __reduce66<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, Spaned<Body> => ActionFn(128);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant25(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action128(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 36)
    }
    pub(crate) fn __reduce67<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThan = ">" => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThanEquals = ">=" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce69<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // IntLit = r#"[0-9]+"# => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce70<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item = Spaned<Function> => ActionFn(6);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce71<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* =  => ActionFn(99);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 41)
    }
    pub(crate) fn __reduce72<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* = Item+ => ActionFn(100);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce73<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item => ActionFn(101);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce74<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item+, Item => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 42)
    }
    pub(crate) fn __reduce75<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThan = "<" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce76<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThanEquals = "<=" => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce77<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = StringLit => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce78<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = FloatLit => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce79<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = IntLit => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce80<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = BoolLit => ActionFn(43);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce81<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalAnd = "&&" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce82<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalOr = "||" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce83<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Minus = "-" => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce84<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Times => ActionFn(69);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce85<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Devide => ActionFn(70);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce86<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicitveExpr = Tier<MultiplicationOp, UnaryExpr> => ActionFn(26);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce87<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Name = r#"[a-zA-Z][a-zA-Z0-9_]*"# => ActionFn(13);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce88<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // NotEquals = "!=" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce89<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // OrExpr = Tier<LogicalOr, AndExpr> => ActionFn(21);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce90<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Plus = "+" => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce91<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = BaseExpr => ActionFn(29);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce92<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "[", Expr, "]" => ActionFn(30);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action30(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce93<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "(", Comma<Expr>, ")" => ActionFn(31);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action31(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce94<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, ".", Name => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 55)
    }
    pub(crate) fn __reduce95<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program =  => ActionFn(162);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action162(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce96<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program = Item+ => ActionFn(163);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action163(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce97<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = Stmt => ActionFn(164);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action164(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce98<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> =  => ActionFn(165);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action165(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce99<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+, Stmt => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action166(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce100<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+ => ActionFn(167);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce101<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Args> = Args => ActionFn(149);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action149(input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce102<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Body> = Body => ActionFn(150);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action150(input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce103<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Function> = Function => ActionFn(151);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action151(input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce104<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Name> = Name => ActionFn(152);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action152(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce105<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Type> = Type => ActionFn(153);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action153(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce106<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = Expr => ActionFn(15);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce107<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "let", Name, "=", Expr => ActionFn(16);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant7(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (4, 63)
    }
    pub(crate) fn __reduce108<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "print", Expr => ActionFn(17);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action17(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce109<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "return", Expr => ActionFn(18);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action18(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce110<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? = Stmt => ActionFn(110);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action110(input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce111<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? =  => ActionFn(111);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 64)
    }
    pub(crate) fn __reduce112<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // StringLit = r#"\"(\\\\.|[^\"\\\\])*\""# => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce113<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = Tier<AdditionOp, MultiplicitveExpr>, AdditionOp, MultiplicitveExpr => ActionFn(79);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action79(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce114<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = MultiplicitveExpr => ActionFn(80);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce115<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = Tier<ComparisonOp, AdditiveExpr>, ComparisonOp, AdditiveExpr => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce116<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = AdditiveExpr => ActionFn(82);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce117<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = Tier<EqualityOp, ComparisonExpr>, EqualityOp, ComparisonExpr => ActionFn(83);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action83(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce118<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = ComparisonExpr => ActionFn(84);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce119<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = Tier<LogicalAnd, EqualityExpr>, LogicalAnd, EqualityExpr => ActionFn(85);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action85(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 69)
    }
    pub(crate) fn __reduce120<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = EqualityExpr => ActionFn(86);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce121<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = Tier<LogicalOr, AndExpr>, LogicalOr, AndExpr => ActionFn(87);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action87(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 70)
    }
    pub(crate) fn __reduce122<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = AndExpr => ActionFn(88);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce123<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = Tier<MultiplicationOp, UnaryExpr>, MultiplicationOp, UnaryExpr => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action77(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce124<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = UnaryExpr => ActionFn(78);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce125<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Times = "*" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce126<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "int" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce127<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "bool" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce128<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "string" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce129<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = PostfixExpr => ActionFn(27);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce130<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = UnaryOp, UnaryExpr => ActionFn(28);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action28(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 74)
    }
    pub(crate) fn __reduce131<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "!" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce132<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "-" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce134<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Function = Function => ActionFn(2);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce135<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Item = Item => ActionFn(1);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce136<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Program = Program => ActionFn(0);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce137<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Stmt = Stmt => ActionFn(3);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 80)
    }
}
pub use self::__parse__Expr::ExprParser;

mod __parse__Function {
    #![allow(
        non_snake_case,
        non_camel_case_types,
        unused_mut,
        unused_variables,
        unused_imports,
        unused_parens
    )]

    use crate::ast::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate alloc;
    extern crate core;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input> {
        Variant0(&'input str),
        Variant1(Spanned<Type>),
        Variant2(core::option::Option<Spanned<Type>>),
        Variant3(Vec<Stmt<'input>>),
        Variant4(core::option::Option<Vec<Stmt<'input>>>),
        Variant5(Arg<'input>),
        Variant6(alloc::vec::Vec<Arg<'input>>),
        Variant7(Expr<'input>),
        Variant8(alloc::vec::Vec<Expr<'input>>),
        Variant9(Stmt<'input>),
        Variant10(alloc::vec::Vec<Stmt<'input>>),
        Variant11(usize),
        Variant12(BinOp),
        Variant13(core::option::Option<Arg<'input>>),
        Variant14(Vec<Arg<'input>>),
        Variant15(Box<Expr<'input>>),
        Variant16(bool),
        Variant17(Vec<Expr<'input>>),
        Variant18(core::option::Option<Expr<'input>>),
        Variant19(Function<'input>),
        Variant20(Item<'input>),
        Variant21(alloc::vec::Vec<Item<'input>>),
        Variant22(Literal<'input>),
        Variant23(Program<'input>),
        Variant24(Spanned<Vec<Arg<'input>>>),
        Variant25(Spanned<Vec<Stmt<'input>>>),
        Variant26(Spanned<Function<'input>>),
        Variant27(Spanned<&'input str>),
        Variant28(core::option::Option<Stmt<'input>>),
        Variant29(Type),
        Variant30(UnaryOp),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, // State 2
        0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 4
        0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 53,
        0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 6
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 21, 22, 23, 0, 77, 24, 7, 0, -99, 78, 79, 80, 44, // State 7
        0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 9
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 21, 22, 23, 0, 77, 24, 7, 0, -101, 78, 79, 80, 44, // State 10
        0, -26, -26, 0, -26, 0, 90, -26, 91, 0, 0, 0, 0, -26, -26, -26, 0, -26, -26, -26, 0, -26,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, 0, 0, 0, 0, // State 11
        0, -52, -52, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, -52, 96, 97, 0, -52, 98, 99, 0, -52, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, -52, 0, 0, 0, 0, // State 12
        0, 102, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, 0, -58, 0, 0, 0, 103, 0, 0, 0, -58, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, 0, 0, 0, // State 13
        0, 0, 104, 0, -27, 0, 0, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, -27, 0, 0, 0, 0, // State 14
        0, 0, 0, 0, -90, 0, 0, -90, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -90, 105, -90, 0, 0, 0, 0, // State 15
        0, -87, -87, 0, -87, 108, -87, -87, -87, 0, 0, 109, 0, -87, -87, -87, 0, -87, -87, -87, 0,
        -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, -87, -87, 0, 0, 0, 0,
        // State 16
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20, 0,
        0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 17
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, // State 19
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, // State 21
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 22
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 23
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 53,
        0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 25
        74, 0, 0, 18, -49, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, // State 27
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 28
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 29
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 30
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 31
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 32
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 33
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 36
        74, 0, 0, 18, -51, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 37
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 38
        74, 0, 0, 18, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 77, 24, 7, 0, 0, 78, 79, 80, 44, // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 42
        0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 43
        0, -88, -88, -88, -88, -88, -88, -88, -88, 0, -88, -88, -88, -88, -88, -88, -88, -88, -88,
        -88, -88, -88, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, -88, -88, -88, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 47
        0, 0, 0, 0, -44, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 48
        0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -106, 0, 0, 0, 0, 0, 0, // State 51
        0, 0, 0, 0, -128, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, // State 52
        0, 0, 0, 0, -127, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, // State 53
        0, 0, 0, 0, -129, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, // State 54
        0, -117, -117, 0, -117, 0, 0, -117, 0, 0, 0, 0, 0, -117, -117, -117, 0, -117, -117, -117,
        0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, -117, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, -123, 0, 0, -123, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -123, -123, -123, 0, 0, 0, 0, // State 56
        0, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92, -92, 0, -92, -92, -92, 0, -92, -92, -92,
        -92, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, -92, 0, 0, 0, 0,
        // State 57
        0, -38, -38, -38, -38, -38, -38, -38, -38, 0, -38, -38, 0, -38, -38, -38, 0, -38, -38, -38,
        -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, -38, 0, 0, 0, 0,
        // State 58
        0, -81, -81, -81, -81, -81, -81, -81, -81, 0, -81, -81, 0, -81, -81, -81, 0, -81, -81, -81,
        -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, -81, 0, 0, 0, 0,
        // State 59
        0, -119, -119, 0, -119, 0, 0, -119, 0, 0, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, -119, 0, 0, 0, 0, // State 60
        0, 0, -121, 0, -121, 0, 0, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, -121, -121, 0, 0, 0, 0, // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, // State 62
        0, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79, -79, 0, -79, -79, -79, 0, -79, -79, -79,
        -79, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, -79, 0, 0, 0, 0,
        // State 63
        0, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80, -80, 0, -80, -80, -80, 0, -80, -80, -80,
        -80, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, -80, 0, 0, 0, 0,
        // State 64
        0, -40, -40, -40, -40, -40, -40, -40, -40, 0, -40, -40, 0, -40, -40, -40, 0, -40, -40, -40,
        -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, -40, 0, 0, 0, 0,
        // State 65
        0, -115, -115, 0, -115, 0, -115, -115, -115, 0, 0, 0, 0, -115, -115, -115, 0, -115, -115,
        -115, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, 0, 0, 0, 0,
        // State 66
        0, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, 0, -37, -37, -37, 0, -37, -37, -37,
        -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, -37, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -62, 0, -62, 0, 0, 0, 0, // State 68
        0, -130, -130, 26, -130, -130, -130, -130, -130, 0, 27, -130, 0, -130, -130, -130, 0, -130,
        -130, -130, 28, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, -130, -130, 0, 0, 0,
        0, // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, // State 71
        0, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78, -78, 0, -78, -78, -78, 0, -78, -78, -78,
        -78, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, -78, 0, 0, 0, 0,
        // State 72
        0, -125, -125, 0, -125, -125, -125, -125, -125, 0, 0, -125, 0, -125, -125, -125, 0, -125,
        -125, -125, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, -125, 0, 0, 0,
        0, // State 73
        -132, 0, 0, -132, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0,
        -132, -132, 0, 0, 0, 0, 0, 0, -132, -132, -132, 0, 0, -132, -132, -132, -132,
        // State 74
        -133, 0, 0, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0,
        -133, -133, 0, 0, 0, 0, 0, 0, -133, -133, -133, 0, 0, -133, -133, -133, -133,
        // State 75
        0, -43, -43, -43, -43, -43, -43, -43, -43, 0, -43, -43, 0, -43, -43, -43, 0, -43, -43, -43,
        -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, -43, 0, 0, 0, 0,
        // State 76
        0, -42, -42, -42, -42, -42, -42, -42, -42, 0, -42, -42, 0, -42, -42, -42, 0, -42, -42, -42,
        -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, 0, 0, 0, 0,
        // State 77
        0, -113, -113, -113, -113, -113, -113, -113, -113, 0, -113, -113, 0, -113, -113, -113, 0,
        -113, -113, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113,
        0, 0, 0, 0, // State 78
        0, -65, -65, -65, -65, -65, -65, -65, -65, 0, -65, -65, 0, -65, -65, -65, 0, -65, -65, -65,
        -65, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, -65, 0, 0, 0, 0,
        // State 79
        0, -70, -70, -70, -70, -70, -70, -70, -70, 0, -70, -70, 0, -70, -70, -70, 0, -70, -70, -70,
        -70, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, -70, 0, 0, 0, 0,
        // State 80
        0, 0, 0, 0, -46, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 81
        0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, // State 85
        0, -41, -41, -41, -41, -41, -41, -41, -41, 0, -41, -41, 0, -41, -41, -41, 0, -41, -41, -41,
        -41, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41, -41, 0, 0, 0, 0,
        // State 86
        -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20,
        -20, 0, 0, -20, -20, -20, 0, -20, -20, -20, 0, -20, -20, -20, -20, -20,
        // State 87
        -25, 0, 0, -25, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, -25,
        -25, 0, 0, 0, 0, 0, 0, -25, -25, -25, 0, 0, -25, -25, -25, -25, // State 88
        -24, 0, 0, -24, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24,
        -24, 0, 0, 0, 0, 0, 0, -24, -24, -24, 0, 0, -24, -24, -24, -24, // State 89
        -91, 0, 0, -91, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91,
        -91, 0, 0, 0, 0, 0, 0, -91, -91, -91, 0, 0, -91, -91, -91, -91, // State 90
        -84, 0, 0, -84, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, -84,
        -84, 0, 0, 0, 0, 0, 0, -84, -84, -84, 0, 0, -84, -84, -84, -84, // State 91
        -54, 0, 0, -54, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, -54,
        -54, 0, 0, 0, 0, 0, 0, -54, -54, -54, 0, 0, -54, -54, -54, -54, // State 92
        -56, 0, 0, -56, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, -56,
        -56, 0, 0, 0, 0, 0, 0, -56, -56, -56, 0, 0, -56, -56, -56, -56, // State 93
        -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, -53,
        -53, 0, 0, 0, 0, 0, 0, -53, -53, -53, 0, 0, -53, -53, -53, -53, // State 94
        -55, 0, 0, -55, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, -55,
        -55, 0, 0, 0, 0, 0, 0, -55, -55, -55, 0, 0, -55, -55, -55, -55, // State 95
        -76, 0, 0, -76, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76,
        -76, 0, 0, 0, 0, 0, 0, -76, -76, -76, 0, 0, -76, -76, -76, -76, // State 96
        -77, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, -77,
        -77, 0, 0, 0, 0, 0, 0, -77, -77, -77, 0, 0, -77, -77, -77, -77, // State 97
        -68, 0, 0, -68, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, -68,
        -68, 0, 0, 0, 0, 0, 0, -68, -68, -68, 0, 0, -68, -68, -68, -68, // State 98
        -69, 0, 0, -69, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, -69,
        -69, 0, 0, 0, 0, 0, 0, -69, -69, -69, 0, 0, -69, -69, -69, -69, // State 99
        -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, -59,
        -59, 0, 0, 0, 0, 0, 0, -59, -59, -59, 0, 0, -59, -59, -59, -59, // State 100
        -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, -60,
        -60, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, 0, -60, -60, -60, -60, // State 101
        -89, 0, 0, -89, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89,
        -89, 0, 0, 0, 0, 0, 0, -89, -89, -89, 0, 0, -89, -89, -89, -89, // State 102
        -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, -61,
        -61, 0, 0, 0, 0, 0, 0, -61, -61, -61, 0, 0, -61, -61, -61, -61, // State 103
        -82, 0, 0, -82, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82,
        -82, 0, 0, 0, 0, 0, 0, -82, -82, -82, 0, 0, -82, -82, -82, -82, // State 104
        -83, 0, 0, -83, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, -83,
        -83, 0, 0, 0, 0, 0, 0, -83, -83, -83, 0, 0, -83, -83, -83, -83, // State 105
        -86, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86,
        -86, 0, 0, 0, 0, 0, 0, -86, -86, -86, 0, 0, -86, -86, -86, -86, // State 106
        -85, 0, 0, -85, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85,
        -85, 0, 0, 0, 0, 0, 0, -85, -85, -85, 0, 0, -85, -85, -85, -85, // State 107
        -126, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0,
        -126, -126, 0, 0, 0, 0, 0, 0, -126, -126, -126, 0, 0, -126, -126, -126, -126,
        // State 108
        -57, 0, 0, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, -57,
        -57, 0, 0, 0, 0, 0, 0, -57, -57, -57, 0, 0, -57, -57, -57, -57, // State 109
        0, -131, -131, 0, -131, -131, -131, -131, -131, 0, 0, -131, 0, -131, -131, -131, 0, -131,
        -131, -131, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -131, -131, 0, 0, 0,
        0, // State 110
        0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, // State 116
        0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, // State 117
        0, 0, 0, 0, -28, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 118
        -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21,
        -21, 0, 0, -21, -21, -21, 0, -21, -21, -21, 0, -21, -21, -21, -21, -21,
        // State 119
        0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 120
        0, 0, 0, 0, -48, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 121
        0, -95, -95, -95, -95, -95, -95, -95, -95, 0, -95, -95, 0, -95, -95, -95, 0, -95, -95, -95,
        -95, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, -95, -95, 0, 0, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 123
        0, -114, -114, 0, -114, 0, -114, -114, -114, 0, 0, 0, 0, -114, -114, -114, 0, -114, -114,
        -114, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, 0, 0, 0, 0,
        // State 124
        0, -116, -116, 0, -116, 0, 0, -116, 0, 0, 0, 0, 0, -116, -116, -116, 0, -116, -116, -116, 0,
        -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, 0, 0, 0, 0,
        // State 125
        0, -118, -118, 0, -118, 0, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, -118, 0, 0, 0, 0, // State 126
        0, 0, -120, 0, -120, 0, 0, -120, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0, 0, 0, // State 127
        0, 0, 0, 0, -122, 0, 0, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, -122, 0, 0, 0, 0, // State 128
        0, -124, -124, 0, -124, -124, -124, -124, -124, 0, 0, -124, 0, -124, -124, -124, 0, -124,
        -124, -124, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, -124, 0, 0, 0,
        0, // State 129
        0, -39, -39, -39, -39, -39, -39, -39, -39, 0, -39, -39, 0, -39, -39, -39, 0, -39, -39, -39,
        -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -39, -39, 0, 0, 0, 0,
        // State 130
        0, -34, -34, -34, -34, -34, -34, -34, -34, 0, -34, -34, 0, -34, -34, -34, 0, -34, -34, -34,
        -34, -34, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, -34, -34, 0, 0, 0, 0,
        // State 131
        0, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, -36, 0, -36, -36, -36, 0, -36, -36, -36,
        -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36, -36, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, -50, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 133
        0, -94, -94, -94, -94, -94, -94, -94, -94, 0, -94, -94, 0, -94, -94, -94, 0, -94, -94, -94,
        -94, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, -94, 0, 0, 0, 0,
        // State 134
        -15, 0, 0, -15, -15, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15,
        -15, 0, 0, 0, 0, 0, 0, -15, -15, -15, 0, 0, -15, -15, -15, -15, // State 135
        0, -93, -93, -93, -93, -93, -93, -93, -93, 0, -93, -93, 0, -93, -93, -93, 0, -93, -93, -93,
        -93, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, -93, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, // State 137
        -16, 0, 0, -16, -16, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0,
        -16, -16, 0, 0, 0, 0, 0, 0, -16, -16, -16, 0, 0, -16, -16, -16, -16, // State 138
        0, -35, -35, -35, -35, -35, -35, -35, -35, 0, -35, -35, 0, -35, -35, -35, 0, -35, -35, -35,
        -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -35, 0, 0, 0, 0,
        // State 139
        0, -33, -33, -33, -33, -33, -33, -33, -33, 0, -33, -33, 0, -33, -33, -33, 0, -33, -33, -33,
        -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -33, -33, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 43 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,    // State 1
        0,    // State 2
        0,    // State 3
        0,    // State 4
        0,    // State 5
        0,    // State 6
        0,    // State 7
        0,    // State 8
        0,    // State 9
        0,    // State 10
        0,    // State 11
        0,    // State 12
        0,    // State 13
        0,    // State 14
        0,    // State 15
        0,    // State 16
        0,    // State 17
        0,    // State 18
        0,    // State 19
        0,    // State 20
        0,    // State 21
        0,    // State 22
        0,    // State 23
        0,    // State 24
        0,    // State 25
        0,    // State 26
        0,    // State 27
        0,    // State 28
        0,    // State 29
        0,    // State 30
        0,    // State 31
        0,    // State 32
        0,    // State 33
        0,    // State 34
        0,    // State 35
        0,    // State 36
        0,    // State 37
        0,    // State 38
        0,    // State 39
        0,    // State 40
        0,    // State 41
        -135, // State 42
        0,    // State 43
        0,    // State 44
        0,    // State 45
        -103, // State 46
        -67,  // State 47
        0,    // State 48
        0,    // State 49
        0,    // State 50
        0,    // State 51
        0,    // State 52
        0,    // State 53
        0,    // State 54
        0,    // State 55
        0,    // State 56
        0,    // State 57
        0,    // State 58
        0,    // State 59
        0,    // State 60
        0,    // State 61
        0,    // State 62
        0,    // State 63
        0,    // State 64
        0,    // State 65
        0,    // State 66
        0,    // State 67
        0,    // State 68
        0,    // State 69
        0,    // State 70
        0,    // State 71
        0,    // State 72
        0,    // State 73
        0,    // State 74
        0,    // State 75
        0,    // State 76
        0,    // State 77
        0,    // State 78
        0,    // State 79
        0,    // State 80
        0,    // State 81
        0,    // State 82
        0,    // State 83
        -66,  // State 84
        0,    // State 85
        -41,  // State 86
        0,    // State 87
        0,    // State 88
        0,    // State 89
        0,    // State 90
        0,    // State 91
        0,    // State 92
        0,    // State 93
        0,    // State 94
        0,    // State 95
        0,    // State 96
        0,    // State 97
        0,    // State 98
        0,    // State 99
        0,    // State 100
        0,    // State 101
        0,    // State 102
        0,    // State 103
        0,    // State 104
        0,    // State 105
        0,    // State 106
        0,    // State 107
        0,    // State 108
        0,    // State 109
        0,    // State 110
        0,    // State 111
        0,    // State 112
        0,    // State 113
        0,    // State 114
        0,    // State 115
        0,    // State 116
        0,    // State 117
        0,    // State 118
        0,    // State 119
        0,    // State 120
        0,    // State 121
        0,    // State 122
        0,    // State 123
        0,    // State 124
        0,    // State 125
        0,    // State 126
        0,    // State 127
        0,    // State 128
        0,    // State 129
        0,    // State 130
        0,    // State 131
        0,    // State 132
        0,    // State 133
        0,    // State 134
        0,    // State 135
        0,    // State 136
        0,    // State 137
        0,    // State 138
        0,    // State 139
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            6 => 7,
            9 => 36,
            12 => 9,
            15 => 28,
            16 => match state {
                29 => 124,
                _ => 54,
            },
            17 => match state {
                32 => 127,
                _ => 55,
            },
            18 => match state {
                7 => 80,
                _ => 47,
            },
            20 => 44,
            21 => match state {
                23 => 35,
                37 => 39,
                _ => 34,
            },
            22 => 56,
            23 => match state {
                3 | 8 => 45,
                34 => 130,
                35 => 131,
                39 => 138,
                40 => 139,
                _ => 57,
            },
            24 => 58,
            25 => 48,
            26 => 119,
            27 => match state {
                30 => 125,
                _ => 59,
            },
            28 => 29,
            29 => 105,
            30 => match state {
                31 => 126,
                _ => 60,
            },
            31 => 30,
            32 => 99,
            33 => match state {
                6 | 9 => 61,
                17 => 110,
                21 => 114,
                22 => 115,
                25 => 120,
                27 => 122,
                36 => 132,
                38 => 136,
                _ => 112,
            },
            35 => 62,
            36 => 41,
            37 => 91,
            38 => 92,
            39 => 63,
            43 => 93,
            44 => 94,
            45 => 64,
            46 => 31,
            47 => 32,
            48 => 87,
            49 => 33,
            50 => match state {
                28 => 123,
                _ => 65,
            },
            51 => match state {
                1 => 42,
                4 | 7 => 49,
                18 => 111,
                20 => 113,
                26 => 121,
                _ => 66,
            },
            52 => 100,
            53 => 67,
            54 => 88,
            55 => 68,
            57 => 69,
            58 => 3,
            59 => match state {
                8 => 83,
                _ => 46,
            },
            61 => 2,
            62 => 8,
            63 => match state {
                9 => 84,
                _ => 70,
            },
            65 => 71,
            66 => 10,
            67 => 11,
            68 => 12,
            69 => 13,
            70 => 14,
            71 => 15,
            72 => 106,
            73 => match state {
                24 => 117,
                _ => 50,
            },
            74 => match state {
                16 => 109,
                33 => 128,
                _ => 72,
            },
            75 => 16,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""[""###,
            r###""]""###,
            r###""bool""###,
            r###""else""###,
            r###""false""###,
            r###""fn""###,
            r###""for""###,
            r###""if""###,
            r###""in""###,
            r###""int""###,
            r###""let""###,
            r###""print""###,
            r###""return""###,
            r###""string""###,
            r###""true""###,
            r###""while""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"r#"\"(\\\\.|[^\"\\\\])*\""#"###,
            r###"r#"[+-]?[0-9]+[.][0-9]*"#"###,
            r###"r#"[0-9]+"#"###,
            r###"r#"[a-zA-Z][a-zA-Z0-9_]*"#"###,
        ];
        __TERMINAL
            .iter()
            .enumerate()
            .filter_map(|(index, terminal)| {
                let next_state = __action(__state, index);
                if next_state == 0 {
                    None
                } else {
                    Some(alloc::string::ToString::to_string(terminal))
                }
            })
            .collect()
    }
    pub(crate) struct __StateMachine<'input> {
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input> {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Function<'input>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
            Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
            0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 43 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<'input>(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize> {
        match *__token {
            Token(4, _) if true => Some(0),
            Token(5, _) if true => Some(1),
            Token(6, _) if true => Some(2),
            Token(7, _) if true => Some(3),
            Token(8, _) if true => Some(4),
            Token(9, _) if true => Some(5),
            Token(10, _) if true => Some(6),
            Token(11, _) if true => Some(7),
            Token(12, _) if true => Some(8),
            Token(13, _) if true => Some(9),
            Token(14, _) if true => Some(10),
            Token(15, _) if true => Some(11),
            Token(16, _) if true => Some(12),
            Token(17, _) if true => Some(13),
            Token(18, _) if true => Some(14),
            Token(19, _) if true => Some(15),
            Token(20, _) if true => Some(16),
            Token(21, _) if true => Some(17),
            Token(22, _) if true => Some(18),
            Token(23, _) if true => Some(19),
            Token(24, _) if true => Some(20),
            Token(25, _) if true => Some(21),
            Token(26, _) if true => Some(22),
            Token(27, _) if true => Some(23),
            Token(28, _) if true => Some(24),
            Token(29, _) if true => Some(25),
            Token(30, _) if true => Some(26),
            Token(31, _) if true => Some(27),
            Token(32, _) if true => Some(28),
            Token(33, _) if true => Some(29),
            Token(34, _) if true => Some(30),
            Token(35, _) if true => Some(31),
            Token(36, _) if true => Some(32),
            Token(37, _) if true => Some(33),
            Token(38, _) if true => Some(34),
            Token(39, _) if true => Some(35),
            Token(40, _) if true => Some(36),
            Token(41, _) if true => Some(37),
            Token(42, _) if true => Some(38),
            Token(0, _) if true => Some(39),
            Token(1, _) if true => Some(40),
            Token(2, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            _ => None,
        }
    }
    fn __token_to_symbol<'input>(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input> {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18
            | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34
            | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 => match __token {
                Token(4, __tok0)
                | Token(5, __tok0)
                | Token(6, __tok0)
                | Token(7, __tok0)
                | Token(8, __tok0)
                | Token(9, __tok0)
                | Token(10, __tok0)
                | Token(11, __tok0)
                | Token(12, __tok0)
                | Token(13, __tok0)
                | Token(14, __tok0)
                | Token(15, __tok0)
                | Token(16, __tok0)
                | Token(17, __tok0)
                | Token(18, __tok0)
                | Token(19, __tok0)
                | Token(20, __tok0)
                | Token(21, __tok0)
                | Token(22, __tok0)
                | Token(23, __tok0)
                | Token(24, __tok0)
                | Token(25, __tok0)
                | Token(26, __tok0)
                | Token(27, __tok0)
                | Token(28, __tok0)
                | Token(29, __tok0)
                | Token(30, __tok0)
                | Token(31, __tok0)
                | Token(32, __tok0)
                | Token(33, __tok0)
                | Token(34, __tok0)
                | Token(35, __tok0)
                | Token(36, __tok0)
                | Token(37, __tok0)
                | Token(38, __tok0)
                | Token(39, __tok0)
                | Token(40, __tok0)
                | Token(41, __tok0)
                | Token(42, __tok0)
                | Token(0, __tok0)
                | Token(1, __tok0)
                | Token(2, __tok0)
                | Token(3, __tok0)
                    if true =>
                {
                    __Symbol::Variant0(__tok0)
                }
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct FunctionParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl FunctionParser {
        pub fn new() -> FunctionParser {
            let __builder = super::__intern_token::new_builder();
            FunctionParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<'input>(
            &self,
            input: &'input str,
        ) -> Result<Function<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<'input>(
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<
        Result<Function<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>,
    > {
        let (__pop_states, __nonterminal) = match __action {
            0 => __reduce0(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            1 => __reduce1(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            2 => __reduce2(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            3 => __reduce3(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            4 => __reduce4(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            5 => __reduce5(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            6 => __reduce6(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            7 => __reduce7(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            8 => __reduce8(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            9 => __reduce9(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            10 => __reduce10(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            11 => __reduce11(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            12 => __reduce12(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            13 => __reduce13(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            14 => __reduce14(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            15 => __reduce15(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            16 => __reduce16(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            17 => __reduce17(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            18 => __reduce18(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            19 => __reduce19(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            20 => __reduce20(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            21 => __reduce21(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            22 => __reduce22(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            23 => __reduce23(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            24 => __reduce24(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            25 => __reduce25(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            26 => __reduce26(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            27 => __reduce27(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            28 => __reduce28(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            29 => __reduce29(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            30 => __reduce30(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            31 => __reduce31(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            32 => __reduce32(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            33 => __reduce33(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            34 => __reduce34(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            35 => __reduce35(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            36 => __reduce36(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            37 => __reduce37(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            38 => __reduce38(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            39 => __reduce39(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            40 => __reduce40(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            41 => __reduce41(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            42 => __reduce42(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            43 => __reduce43(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            44 => __reduce44(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            45 => __reduce45(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            46 => __reduce46(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            47 => __reduce47(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            48 => __reduce48(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            49 => __reduce49(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            50 => __reduce50(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            51 => __reduce51(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            52 => __reduce52(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            53 => __reduce53(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            54 => __reduce54(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            55 => __reduce55(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            56 => __reduce56(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            57 => __reduce57(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            58 => __reduce58(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            59 => __reduce59(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            60 => __reduce60(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            61 => __reduce61(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            62 => __reduce62(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            63 => __reduce63(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            64 => __reduce64(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            65 => __reduce65(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            66 => __reduce66(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            67 => __reduce67(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            68 => __reduce68(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            69 => __reduce69(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            70 => __reduce70(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            71 => __reduce71(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            72 => __reduce72(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            73 => __reduce73(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            74 => __reduce74(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            75 => __reduce75(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            76 => __reduce76(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            77 => __reduce77(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            78 => __reduce78(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            79 => __reduce79(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            80 => __reduce80(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            81 => __reduce81(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            82 => __reduce82(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            83 => __reduce83(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            84 => __reduce84(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            85 => __reduce85(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            86 => __reduce86(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            87 => __reduce87(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            88 => __reduce88(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            89 => __reduce89(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            90 => __reduce90(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            91 => __reduce91(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            92 => __reduce92(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            93 => __reduce93(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            94 => __reduce94(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            95 => __reduce95(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            96 => __reduce96(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            97 => __reduce97(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            98 => __reduce98(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            99 => __reduce99(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            100 => __reduce100(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            101 => __reduce101(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            102 => __reduce102(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            103 => __reduce103(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            104 => __reduce104(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            105 => __reduce105(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            106 => __reduce106(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            107 => __reduce107(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            108 => __reduce108(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            109 => __reduce109(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            110 => __reduce110(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            111 => __reduce111(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            112 => __reduce112(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            113 => __reduce113(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            114 => __reduce114(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            115 => __reduce115(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            116 => __reduce116(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            117 => __reduce117(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            118 => __reduce118(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            119 => __reduce119(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            120 => __reduce120(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            121 => __reduce121(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            122 => __reduce122(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            123 => __reduce123(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            124 => __reduce124(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            125 => __reduce125(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            126 => __reduce126(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            127 => __reduce127(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            128 => __reduce128(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            129 => __reduce129(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            130 => __reduce130(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            131 => __reduce131(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            132 => __reduce132(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            133 => __reduce133(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            134 => {
                // __Function = Function => ActionFn(2);
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action2(input, __sym0);
                return Some(Ok(__nt));
            }
            135 => __reduce135(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            136 => __reduce136(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            137 => __reduce137(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            _ => panic!("invalid action code {}", __action),
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant5<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Arg<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant12<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, BinOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant15<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Box<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant7<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Expr<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant19<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Function<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant20<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Item<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant22<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Literal<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant23<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Program<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant26<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Function<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant1<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Type>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant24<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Arg<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant25<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant27<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<&'input str>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant9<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Stmt<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant29<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Type, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant30<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, UnaryOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant14<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant17<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant3<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant6<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant8<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant21<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Item<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant10<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant16<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, bool, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant13<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant18<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant2<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Spanned<Type>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant28<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant4<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant11<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, usize, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant0<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, &'input str, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    pub(crate) fn __reduce0<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>) = "->", Spaned<Type> => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? = "->", Spaned<Type> => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? =  => ActionFn(93);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action93(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>) = "else", Body => ActionFn(75);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action75(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? = "else", Body => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action129(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce5<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? =  => ActionFn(74);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action74(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",") = Arg, "," => ActionFn(109);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action109(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* =  => ActionFn(107);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action107(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* = (<Arg> ",")+ => ActionFn(108);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = Arg, "," => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce10<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = (<Arg> ",")+, Arg, "," => ActionFn(133);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action133(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 6)
    }
    pub(crate) fn __reduce11<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",") = Expr, "," => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action119(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* =  => ActionFn(117);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action117(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce13<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* = (<Expr> ",")+ => ActionFn(118);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = Expr, "," => ActionFn(136);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action136(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce15<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 9)
    }
    pub(crate) fn __reduce16<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";") = Stmt, ";" => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* =  => ActionFn(112);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action112(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce18<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* = (<Stmt> ";")+ => ActionFn(113);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = Stmt, ";" => ActionFn(140);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action140(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce20<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = (<Stmt> ";")+, Stmt, ";" => ActionFn(141);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action141(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce21<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @L =  => ActionFn(104);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action104(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce22<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @R =  => ActionFn(103);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action103(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 14)
    }
    pub(crate) fn __reduce23<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Plus => ActionFn(67);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce24<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Minus => ActionFn(68);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce25<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditiveExpr = Tier<AdditionOp, MultiplicitveExpr> => ActionFn(25);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce26<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AndExpr = Tier<LogicalAnd, EqualityExpr> => ActionFn(22);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce27<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg = Name, ":", Type => ActionFn(9);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action9(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce28<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? = Arg => ActionFn(105);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105(input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce29<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? =  => ActionFn(106);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce30<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Args = "(", Comma<Arg>, ")" => ActionFn(8);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action8(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce31<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BExpr = Expr => ActionFn(20);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20(input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce32<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body, "else", Body => ActionFn(130);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action130(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce33<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce34<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "for", Name, "in", BExpr, Body => ActionFn(34);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant15(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action34(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce35<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "while", BExpr, Body => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action35(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce36<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Name => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce37<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Body => ActionFn(37);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce38<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "(", Expr, ")" => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action38(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce39<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Literal => ActionFn(39);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Body = "{", Semi<Stmt>, "}" => ActionFn(14);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action14(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce41<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "true" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "false" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce43<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = Arg => ActionFn(154);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action154(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce44<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> =  => ActionFn(155);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action155(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce45<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+, Arg => ActionFn(156);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action156(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce46<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+ => ActionFn(157);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce47<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = Expr => ActionFn(158);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action158(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce48<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> =  => ActionFn(159);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action159(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce49<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+, Expr => ActionFn(160);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action160(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce50<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+ => ActionFn(161);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action161(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonExpr = Tier<ComparisonOp, AdditiveExpr> => ActionFn(24);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce52<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThan => ActionFn(63);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce53<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThan => ActionFn(64);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce54<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThanEquals => ActionFn(65);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce55<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThanEquals => ActionFn(66);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce56<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Devide = "/" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce57<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityExpr = Tier<EqualityOp, ComparisonExpr> => ActionFn(23);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce58<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = Equals => ActionFn(61);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce59<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = NotEquals => ActionFn(62);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce60<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Equals = "==" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce61<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr = OrExpr => ActionFn(19);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce62<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? = Expr => ActionFn(115);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115(input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce63<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? =  => ActionFn(116);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce64<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // FloatLit = r#"[+-]?[0-9]+[.][0-9]*"# => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce65<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, "->", Spaned<Type>, Spaned<Body> => ActionFn(127);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant25(__symbols);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action127(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (6, 36)
    }
    pub(crate) fn __reduce66<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, Spaned<Body> => ActionFn(128);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant25(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action128(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 36)
    }
    pub(crate) fn __reduce67<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThan = ">" => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThanEquals = ">=" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce69<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // IntLit = r#"[0-9]+"# => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce70<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item = Spaned<Function> => ActionFn(6);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce71<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* =  => ActionFn(99);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 41)
    }
    pub(crate) fn __reduce72<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* = Item+ => ActionFn(100);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce73<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item => ActionFn(101);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce74<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item+, Item => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 42)
    }
    pub(crate) fn __reduce75<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThan = "<" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce76<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThanEquals = "<=" => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce77<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = StringLit => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce78<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = FloatLit => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce79<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = IntLit => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce80<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = BoolLit => ActionFn(43);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce81<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalAnd = "&&" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce82<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalOr = "||" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce83<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Minus = "-" => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce84<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Times => ActionFn(69);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce85<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Devide => ActionFn(70);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce86<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicitveExpr = Tier<MultiplicationOp, UnaryExpr> => ActionFn(26);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce87<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Name = r#"[a-zA-Z][a-zA-Z0-9_]*"# => ActionFn(13);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce88<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // NotEquals = "!=" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce89<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // OrExpr = Tier<LogicalOr, AndExpr> => ActionFn(21);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce90<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Plus = "+" => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce91<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = BaseExpr => ActionFn(29);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce92<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "[", Expr, "]" => ActionFn(30);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action30(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce93<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "(", Comma<Expr>, ")" => ActionFn(31);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action31(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce94<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, ".", Name => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 55)
    }
    pub(crate) fn __reduce95<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program =  => ActionFn(162);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action162(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce96<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program = Item+ => ActionFn(163);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action163(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce97<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = Stmt => ActionFn(164);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action164(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce98<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> =  => ActionFn(165);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action165(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce99<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+, Stmt => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action166(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce100<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+ => ActionFn(167);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce101<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Args> = Args => ActionFn(149);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action149(input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce102<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Body> = Body => ActionFn(150);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action150(input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce103<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Function> = Function => ActionFn(151);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action151(input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce104<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Name> = Name => ActionFn(152);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action152(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce105<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Type> = Type => ActionFn(153);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action153(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce106<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = Expr => ActionFn(15);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce107<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "let", Name, "=", Expr => ActionFn(16);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant7(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (4, 63)
    }
    pub(crate) fn __reduce108<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "print", Expr => ActionFn(17);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action17(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce109<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "return", Expr => ActionFn(18);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action18(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce110<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? = Stmt => ActionFn(110);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action110(input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce111<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? =  => ActionFn(111);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 64)
    }
    pub(crate) fn __reduce112<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // StringLit = r#"\"(\\\\.|[^\"\\\\])*\""# => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce113<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = Tier<AdditionOp, MultiplicitveExpr>, AdditionOp, MultiplicitveExpr => ActionFn(79);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action79(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce114<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = MultiplicitveExpr => ActionFn(80);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce115<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = Tier<ComparisonOp, AdditiveExpr>, ComparisonOp, AdditiveExpr => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce116<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = AdditiveExpr => ActionFn(82);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce117<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = Tier<EqualityOp, ComparisonExpr>, EqualityOp, ComparisonExpr => ActionFn(83);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action83(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce118<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = ComparisonExpr => ActionFn(84);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce119<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = Tier<LogicalAnd, EqualityExpr>, LogicalAnd, EqualityExpr => ActionFn(85);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action85(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 69)
    }
    pub(crate) fn __reduce120<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = EqualityExpr => ActionFn(86);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce121<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = Tier<LogicalOr, AndExpr>, LogicalOr, AndExpr => ActionFn(87);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action87(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 70)
    }
    pub(crate) fn __reduce122<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = AndExpr => ActionFn(88);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce123<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = Tier<MultiplicationOp, UnaryExpr>, MultiplicationOp, UnaryExpr => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action77(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce124<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = UnaryExpr => ActionFn(78);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce125<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Times = "*" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce126<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "int" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce127<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "bool" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce128<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "string" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce129<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = PostfixExpr => ActionFn(27);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce130<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = UnaryOp, UnaryExpr => ActionFn(28);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action28(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 74)
    }
    pub(crate) fn __reduce131<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "!" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce132<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "-" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce133<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Expr = Expr => ActionFn(4);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce135<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Item = Item => ActionFn(1);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce136<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Program = Program => ActionFn(0);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce137<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Stmt = Stmt => ActionFn(3);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 80)
    }
}
pub use self::__parse__Function::FunctionParser;

mod __parse__Item {
    #![allow(
        non_snake_case,
        non_camel_case_types,
        unused_mut,
        unused_variables,
        unused_imports,
        unused_parens
    )]

    use crate::ast::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate alloc;
    extern crate core;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input> {
        Variant0(&'input str),
        Variant1(Spanned<Type>),
        Variant2(core::option::Option<Spanned<Type>>),
        Variant3(Vec<Stmt<'input>>),
        Variant4(core::option::Option<Vec<Stmt<'input>>>),
        Variant5(Arg<'input>),
        Variant6(alloc::vec::Vec<Arg<'input>>),
        Variant7(Expr<'input>),
        Variant8(alloc::vec::Vec<Expr<'input>>),
        Variant9(Stmt<'input>),
        Variant10(alloc::vec::Vec<Stmt<'input>>),
        Variant11(usize),
        Variant12(BinOp),
        Variant13(core::option::Option<Arg<'input>>),
        Variant14(Vec<Arg<'input>>),
        Variant15(Box<Expr<'input>>),
        Variant16(bool),
        Variant17(Vec<Expr<'input>>),
        Variant18(core::option::Option<Expr<'input>>),
        Variant19(Function<'input>),
        Variant20(Item<'input>),
        Variant21(alloc::vec::Vec<Item<'input>>),
        Variant22(Literal<'input>),
        Variant23(Program<'input>),
        Variant24(Spanned<Vec<Arg<'input>>>),
        Variant25(Spanned<Vec<Stmt<'input>>>),
        Variant26(Spanned<Function<'input>>),
        Variant27(Spanned<&'input str>),
        Variant28(core::option::Option<Stmt<'input>>),
        Variant29(Type),
        Variant30(UnaryOp),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, // State 2
        0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 4
        0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 55,
        0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 6
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 21, 22, 23, 0, 79, 24, 7, 0, -99, 80, 81, 82, 46, // State 7
        0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 9
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 21, 22, 23, 0, 79, 24, 7, 0, -101, 80, 81, 82, 46, // State 10
        0, -26, -26, 0, -26, 0, 92, -26, 93, 0, 0, 0, 0, -26, -26, -26, 0, -26, -26, -26, 0, -26,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, 0, 0, 0, 0, // State 11
        0, -52, -52, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, -52, 98, 99, 0, -52, 100, 101, 0, -52, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, -52, 0, 0, 0, 0, // State 12
        0, 104, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, 0, -58, 0, 0, 0, 105, 0, 0, 0, -58, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, 0, 0, 0, // State 13
        0, 0, 106, 0, -27, 0, 0, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, -27, 0, 0, 0, 0, // State 14
        0, 0, 0, 0, -90, 0, 0, -90, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -90, 107, -90, 0, 0, 0, 0, // State 15
        0, -87, -87, 0, -87, 110, -87, -87, -87, 0, 0, 111, 0, -87, -87, -87, 0, -87, -87, -87, 0,
        -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, -87, -87, 0, 0, 0, 0,
        // State 16
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20, 0,
        0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 17
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, // State 19
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, // State 21
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 22
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 23
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 55,
        0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 25
        76, 0, 0, 18, -49, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, // State 27
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 28
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 29
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 30
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 31
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 32
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 33
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 36
        76, 0, 0, 18, -51, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 37
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 38
        76, 0, 0, 18, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 19, 20,
        0, 0, 0, 0, 0, 0, 79, 24, 7, 0, 0, 80, 81, 82, 46, // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 44
        0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 45
        0, -88, -88, -88, -88, -88, -88, -88, -88, 0, -88, -88, -88, -88, -88, -88, -88, -88, -88,
        -88, -88, -88, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, -88, -88, -88, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 49
        0, 0, 0, 0, -44, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 50
        0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -106, 0, 0, 0, 0, 0, 0, // State 53
        0, 0, 0, 0, -128, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, // State 54
        0, 0, 0, 0, -127, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, // State 55
        0, 0, 0, 0, -129, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, // State 56
        0, -117, -117, 0, -117, 0, 0, -117, 0, 0, 0, 0, 0, -117, -117, -117, 0, -117, -117, -117,
        0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, -117, 0, 0, 0, 0,
        // State 57
        0, 0, 0, 0, -123, 0, 0, -123, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -123, -123, -123, 0, 0, 0, 0, // State 58
        0, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92, -92, 0, -92, -92, -92, 0, -92, -92, -92,
        -92, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, -92, 0, 0, 0, 0,
        // State 59
        0, -38, -38, -38, -38, -38, -38, -38, -38, 0, -38, -38, 0, -38, -38, -38, 0, -38, -38, -38,
        -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, -38, 0, 0, 0, 0,
        // State 60
        0, -81, -81, -81, -81, -81, -81, -81, -81, 0, -81, -81, 0, -81, -81, -81, 0, -81, -81, -81,
        -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, -81, 0, 0, 0, 0,
        // State 61
        0, -119, -119, 0, -119, 0, 0, -119, 0, 0, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, -119, 0, 0, 0, 0, // State 62
        0, 0, -121, 0, -121, 0, 0, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, -121, -121, 0, 0, 0, 0, // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, // State 64
        0, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79, -79, 0, -79, -79, -79, 0, -79, -79, -79,
        -79, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, -79, 0, 0, 0, 0,
        // State 65
        0, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80, -80, 0, -80, -80, -80, 0, -80, -80, -80,
        -80, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, -80, 0, 0, 0, 0,
        // State 66
        0, -40, -40, -40, -40, -40, -40, -40, -40, 0, -40, -40, 0, -40, -40, -40, 0, -40, -40, -40,
        -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, -40, 0, 0, 0, 0,
        // State 67
        0, -115, -115, 0, -115, 0, -115, -115, -115, 0, 0, 0, 0, -115, -115, -115, 0, -115, -115,
        -115, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, 0, 0, 0, 0,
        // State 68
        0, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, 0, -37, -37, -37, 0, -37, -37, -37,
        -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, -37, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -62, 0, -62, 0, 0, 0, 0, // State 70
        0, -130, -130, 26, -130, -130, -130, -130, -130, 0, 27, -130, 0, -130, -130, -130, 0, -130,
        -130, -130, 28, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, -130, -130, 0, 0, 0,
        0, // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, // State 73
        0, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78, -78, 0, -78, -78, -78, 0, -78, -78, -78,
        -78, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, -78, 0, 0, 0, 0,
        // State 74
        0, -125, -125, 0, -125, -125, -125, -125, -125, 0, 0, -125, 0, -125, -125, -125, 0, -125,
        -125, -125, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, -125, 0, 0, 0,
        0, // State 75
        -132, 0, 0, -132, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0,
        -132, -132, 0, 0, 0, 0, 0, 0, -132, -132, -132, 0, 0, -132, -132, -132, -132,
        // State 76
        -133, 0, 0, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0,
        -133, -133, 0, 0, 0, 0, 0, 0, -133, -133, -133, 0, 0, -133, -133, -133, -133,
        // State 77
        0, -43, -43, -43, -43, -43, -43, -43, -43, 0, -43, -43, 0, -43, -43, -43, 0, -43, -43, -43,
        -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, -43, 0, 0, 0, 0,
        // State 78
        0, -42, -42, -42, -42, -42, -42, -42, -42, 0, -42, -42, 0, -42, -42, -42, 0, -42, -42, -42,
        -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, 0, 0, 0, 0,
        // State 79
        0, -113, -113, -113, -113, -113, -113, -113, -113, 0, -113, -113, 0, -113, -113, -113, 0,
        -113, -113, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113,
        0, 0, 0, 0, // State 80
        0, -65, -65, -65, -65, -65, -65, -65, -65, 0, -65, -65, 0, -65, -65, -65, 0, -65, -65, -65,
        -65, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, -65, 0, 0, 0, 0,
        // State 81
        0, -70, -70, -70, -70, -70, -70, -70, -70, 0, -70, -70, 0, -70, -70, -70, 0, -70, -70, -70,
        -70, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, -70, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, -46, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 83
        0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, // State 87
        0, -41, -41, -41, -41, -41, -41, -41, -41, 0, -41, -41, 0, -41, -41, -41, 0, -41, -41, -41,
        -41, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41, -41, 0, 0, 0, 0,
        // State 88
        -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20,
        -20, 0, 0, -20, -20, -20, 0, -20, -20, -20, 0, -20, -20, -20, -20, -20,
        // State 89
        -25, 0, 0, -25, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, -25,
        -25, 0, 0, 0, 0, 0, 0, -25, -25, -25, 0, 0, -25, -25, -25, -25, // State 90
        -24, 0, 0, -24, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24,
        -24, 0, 0, 0, 0, 0, 0, -24, -24, -24, 0, 0, -24, -24, -24, -24, // State 91
        -91, 0, 0, -91, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91,
        -91, 0, 0, 0, 0, 0, 0, -91, -91, -91, 0, 0, -91, -91, -91, -91, // State 92
        -84, 0, 0, -84, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, -84,
        -84, 0, 0, 0, 0, 0, 0, -84, -84, -84, 0, 0, -84, -84, -84, -84, // State 93
        -54, 0, 0, -54, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, -54,
        -54, 0, 0, 0, 0, 0, 0, -54, -54, -54, 0, 0, -54, -54, -54, -54, // State 94
        -56, 0, 0, -56, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, -56,
        -56, 0, 0, 0, 0, 0, 0, -56, -56, -56, 0, 0, -56, -56, -56, -56, // State 95
        -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, -53,
        -53, 0, 0, 0, 0, 0, 0, -53, -53, -53, 0, 0, -53, -53, -53, -53, // State 96
        -55, 0, 0, -55, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, -55,
        -55, 0, 0, 0, 0, 0, 0, -55, -55, -55, 0, 0, -55, -55, -55, -55, // State 97
        -76, 0, 0, -76, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76,
        -76, 0, 0, 0, 0, 0, 0, -76, -76, -76, 0, 0, -76, -76, -76, -76, // State 98
        -77, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, -77,
        -77, 0, 0, 0, 0, 0, 0, -77, -77, -77, 0, 0, -77, -77, -77, -77, // State 99
        -68, 0, 0, -68, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, -68,
        -68, 0, 0, 0, 0, 0, 0, -68, -68, -68, 0, 0, -68, -68, -68, -68, // State 100
        -69, 0, 0, -69, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, -69,
        -69, 0, 0, 0, 0, 0, 0, -69, -69, -69, 0, 0, -69, -69, -69, -69, // State 101
        -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, -59,
        -59, 0, 0, 0, 0, 0, 0, -59, -59, -59, 0, 0, -59, -59, -59, -59, // State 102
        -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, -60,
        -60, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, 0, -60, -60, -60, -60, // State 103
        -89, 0, 0, -89, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89,
        -89, 0, 0, 0, 0, 0, 0, -89, -89, -89, 0, 0, -89, -89, -89, -89, // State 104
        -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, -61,
        -61, 0, 0, 0, 0, 0, 0, -61, -61, -61, 0, 0, -61, -61, -61, -61, // State 105
        -82, 0, 0, -82, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82,
        -82, 0, 0, 0, 0, 0, 0, -82, -82, -82, 0, 0, -82, -82, -82, -82, // State 106
        -83, 0, 0, -83, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, -83,
        -83, 0, 0, 0, 0, 0, 0, -83, -83, -83, 0, 0, -83, -83, -83, -83, // State 107
        -86, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86,
        -86, 0, 0, 0, 0, 0, 0, -86, -86, -86, 0, 0, -86, -86, -86, -86, // State 108
        -85, 0, 0, -85, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85,
        -85, 0, 0, 0, 0, 0, 0, -85, -85, -85, 0, 0, -85, -85, -85, -85, // State 109
        -126, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0,
        -126, -126, 0, 0, 0, 0, 0, 0, -126, -126, -126, 0, 0, -126, -126, -126, -126,
        // State 110
        -57, 0, 0, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, -57,
        -57, 0, 0, 0, 0, 0, 0, -57, -57, -57, 0, 0, -57, -57, -57, -57, // State 111
        0, -131, -131, 0, -131, -131, -131, -131, -131, 0, 0, -131, 0, -131, -131, -131, 0, -131,
        -131, -131, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -131, -131, 0, 0, 0,
        0, // State 112
        0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, // State 118
        0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, // State 119
        0, 0, 0, 0, -28, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 120
        -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21,
        -21, 0, 0, -21, -21, -21, 0, -21, -21, -21, 0, -21, -21, -21, -21, -21,
        // State 121
        0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 122
        0, 0, 0, 0, -48, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 123
        0, -95, -95, -95, -95, -95, -95, -95, -95, 0, -95, -95, 0, -95, -95, -95, 0, -95, -95, -95,
        -95, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, -95, -95, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 125
        0, -114, -114, 0, -114, 0, -114, -114, -114, 0, 0, 0, 0, -114, -114, -114, 0, -114, -114,
        -114, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, 0, 0, 0, 0,
        // State 126
        0, -116, -116, 0, -116, 0, 0, -116, 0, 0, 0, 0, 0, -116, -116, -116, 0, -116, -116, -116, 0,
        -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, 0, 0, 0, 0,
        // State 127
        0, -118, -118, 0, -118, 0, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, -118, 0, 0, 0, 0, // State 128
        0, 0, -120, 0, -120, 0, 0, -120, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0, 0, 0, // State 129
        0, 0, 0, 0, -122, 0, 0, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, -122, 0, 0, 0, 0, // State 130
        0, -124, -124, 0, -124, -124, -124, -124, -124, 0, 0, -124, 0, -124, -124, -124, 0, -124,
        -124, -124, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, -124, 0, 0, 0,
        0, // State 131
        0, -39, -39, -39, -39, -39, -39, -39, -39, 0, -39, -39, 0, -39, -39, -39, 0, -39, -39, -39,
        -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -39, -39, 0, 0, 0, 0,
        // State 132
        0, -34, -34, -34, -34, -34, -34, -34, -34, 0, -34, -34, 0, -34, -34, -34, 0, -34, -34, -34,
        -34, -34, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, -34, -34, 0, 0, 0, 0,
        // State 133
        0, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, -36, 0, -36, -36, -36, 0, -36, -36, -36,
        -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36, -36, 0, 0, 0, 0,
        // State 134
        0, 0, 0, 0, -50, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 135
        0, -94, -94, -94, -94, -94, -94, -94, -94, 0, -94, -94, 0, -94, -94, -94, 0, -94, -94, -94,
        -94, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, -94, 0, 0, 0, 0,
        // State 136
        -15, 0, 0, -15, -15, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15,
        -15, 0, 0, 0, 0, 0, 0, -15, -15, -15, 0, 0, -15, -15, -15, -15, // State 137
        0, -93, -93, -93, -93, -93, -93, -93, -93, 0, -93, -93, 0, -93, -93, -93, 0, -93, -93, -93,
        -93, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, -93, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, // State 139
        -16, 0, 0, -16, -16, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0,
        -16, -16, 0, 0, 0, 0, 0, 0, -16, -16, -16, 0, 0, -16, -16, -16, -16, // State 140
        0, -35, -35, -35, -35, -35, -35, -35, -35, 0, -35, -35, 0, -35, -35, -35, 0, -35, -35, -35,
        -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -35, 0, 0, 0, 0,
        // State 141
        0, -33, -33, -33, -33, -33, -33, -33, -33, 0, -33, -33, 0, -33, -33, -33, 0, -33, -33, -33,
        -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -33, -33, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 43 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,    // State 1
        0,    // State 2
        0,    // State 3
        0,    // State 4
        0,    // State 5
        0,    // State 6
        0,    // State 7
        0,    // State 8
        0,    // State 9
        0,    // State 10
        0,    // State 11
        0,    // State 12
        0,    // State 13
        0,    // State 14
        0,    // State 15
        0,    // State 16
        0,    // State 17
        0,    // State 18
        0,    // State 19
        0,    // State 20
        0,    // State 21
        0,    // State 22
        0,    // State 23
        0,    // State 24
        0,    // State 25
        0,    // State 26
        0,    // State 27
        0,    // State 28
        0,    // State 29
        0,    // State 30
        0,    // State 31
        0,    // State 32
        0,    // State 33
        0,    // State 34
        0,    // State 35
        0,    // State 36
        0,    // State 37
        0,    // State 38
        0,    // State 39
        0,    // State 40
        0,    // State 41
        -104, // State 42
        -136, // State 43
        -71,  // State 44
        0,    // State 45
        0,    // State 46
        0,    // State 47
        -103, // State 48
        -67,  // State 49
        0,    // State 50
        0,    // State 51
        0,    // State 52
        0,    // State 53
        0,    // State 54
        0,    // State 55
        0,    // State 56
        0,    // State 57
        0,    // State 58
        0,    // State 59
        0,    // State 60
        0,    // State 61
        0,    // State 62
        0,    // State 63
        0,    // State 64
        0,    // State 65
        0,    // State 66
        0,    // State 67
        0,    // State 68
        0,    // State 69
        0,    // State 70
        0,    // State 71
        0,    // State 72
        0,    // State 73
        0,    // State 74
        0,    // State 75
        0,    // State 76
        0,    // State 77
        0,    // State 78
        0,    // State 79
        0,    // State 80
        0,    // State 81
        0,    // State 82
        0,    // State 83
        0,    // State 84
        0,    // State 85
        -66,  // State 86
        0,    // State 87
        -41,  // State 88
        0,    // State 89
        0,    // State 90
        0,    // State 91
        0,    // State 92
        0,    // State 93
        0,    // State 94
        0,    // State 95
        0,    // State 96
        0,    // State 97
        0,    // State 98
        0,    // State 99
        0,    // State 100
        0,    // State 101
        0,    // State 102
        0,    // State 103
        0,    // State 104
        0,    // State 105
        0,    // State 106
        0,    // State 107
        0,    // State 108
        0,    // State 109
        0,    // State 110
        0,    // State 111
        0,    // State 112
        0,    // State 113
        0,    // State 114
        0,    // State 115
        0,    // State 116
        0,    // State 117
        0,    // State 118
        0,    // State 119
        0,    // State 120
        0,    // State 121
        0,    // State 122
        0,    // State 123
        0,    // State 124
        0,    // State 125
        0,    // State 126
        0,    // State 127
        0,    // State 128
        0,    // State 129
        0,    // State 130
        0,    // State 131
        0,    // State 132
        0,    // State 133
        0,    // State 134
        0,    // State 135
        0,    // State 136
        0,    // State 137
        0,    // State 138
        0,    // State 139
        0,    // State 140
        0,    // State 141
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            6 => 7,
            9 => 36,
            12 => 9,
            15 => 28,
            16 => match state {
                29 => 126,
                _ => 56,
            },
            17 => match state {
                32 => 129,
                _ => 57,
            },
            18 => match state {
                7 => 82,
                _ => 49,
            },
            20 => 46,
            21 => match state {
                23 => 35,
                37 => 39,
                _ => 34,
            },
            22 => 58,
            23 => match state {
                3 | 8 => 47,
                34 => 132,
                35 => 133,
                39 => 140,
                40 => 141,
                _ => 59,
            },
            24 => 60,
            25 => 50,
            26 => 121,
            27 => match state {
                30 => 127,
                _ => 61,
            },
            28 => 29,
            29 => 107,
            30 => match state {
                31 => 128,
                _ => 62,
            },
            31 => 30,
            32 => 101,
            33 => match state {
                6 | 9 => 63,
                17 => 112,
                21 => 116,
                22 => 117,
                25 => 122,
                27 => 124,
                36 => 134,
                38 => 138,
                _ => 114,
            },
            35 => 64,
            36 => 41,
            37 => 93,
            38 => 94,
            39 => 65,
            40 => 42,
            43 => 95,
            44 => 96,
            45 => 66,
            46 => 31,
            47 => 32,
            48 => 89,
            49 => 33,
            50 => match state {
                28 => 125,
                _ => 67,
            },
            51 => match state {
                1 => 44,
                4 | 7 => 51,
                18 => 113,
                20 => 115,
                26 => 123,
                _ => 68,
            },
            52 => 102,
            53 => 69,
            54 => 90,
            55 => 70,
            57 => 71,
            58 => 3,
            59 => match state {
                8 => 85,
                _ => 48,
            },
            60 => 43,
            61 => 2,
            62 => 8,
            63 => match state {
                9 => 86,
                _ => 72,
            },
            65 => 73,
            66 => 10,
            67 => 11,
            68 => 12,
            69 => 13,
            70 => 14,
            71 => 15,
            72 => 108,
            73 => match state {
                24 => 119,
                _ => 52,
            },
            74 => match state {
                16 => 111,
                33 => 130,
                _ => 74,
            },
            75 => 16,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""[""###,
            r###""]""###,
            r###""bool""###,
            r###""else""###,
            r###""false""###,
            r###""fn""###,
            r###""for""###,
            r###""if""###,
            r###""in""###,
            r###""int""###,
            r###""let""###,
            r###""print""###,
            r###""return""###,
            r###""string""###,
            r###""true""###,
            r###""while""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"r#"\"(\\\\.|[^\"\\\\])*\""#"###,
            r###"r#"[+-]?[0-9]+[.][0-9]*"#"###,
            r###"r#"[0-9]+"#"###,
            r###"r#"[a-zA-Z][a-zA-Z0-9_]*"#"###,
        ];
        __TERMINAL
            .iter()
            .enumerate()
            .filter_map(|(index, terminal)| {
                let next_state = __action(__state, index);
                if next_state == 0 {
                    None
                } else {
                    Some(alloc::string::ToString::to_string(terminal))
                }
            })
            .collect()
    }
    pub(crate) struct __StateMachine<'input> {
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input> {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Item<'input>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
            Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
            0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 43 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<'input>(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize> {
        match *__token {
            Token(4, _) if true => Some(0),
            Token(5, _) if true => Some(1),
            Token(6, _) if true => Some(2),
            Token(7, _) if true => Some(3),
            Token(8, _) if true => Some(4),
            Token(9, _) if true => Some(5),
            Token(10, _) if true => Some(6),
            Token(11, _) if true => Some(7),
            Token(12, _) if true => Some(8),
            Token(13, _) if true => Some(9),
            Token(14, _) if true => Some(10),
            Token(15, _) if true => Some(11),
            Token(16, _) if true => Some(12),
            Token(17, _) if true => Some(13),
            Token(18, _) if true => Some(14),
            Token(19, _) if true => Some(15),
            Token(20, _) if true => Some(16),
            Token(21, _) if true => Some(17),
            Token(22, _) if true => Some(18),
            Token(23, _) if true => Some(19),
            Token(24, _) if true => Some(20),
            Token(25, _) if true => Some(21),
            Token(26, _) if true => Some(22),
            Token(27, _) if true => Some(23),
            Token(28, _) if true => Some(24),
            Token(29, _) if true => Some(25),
            Token(30, _) if true => Some(26),
            Token(31, _) if true => Some(27),
            Token(32, _) if true => Some(28),
            Token(33, _) if true => Some(29),
            Token(34, _) if true => Some(30),
            Token(35, _) if true => Some(31),
            Token(36, _) if true => Some(32),
            Token(37, _) if true => Some(33),
            Token(38, _) if true => Some(34),
            Token(39, _) if true => Some(35),
            Token(40, _) if true => Some(36),
            Token(41, _) if true => Some(37),
            Token(42, _) if true => Some(38),
            Token(0, _) if true => Some(39),
            Token(1, _) if true => Some(40),
            Token(2, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            _ => None,
        }
    }
    fn __token_to_symbol<'input>(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input> {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18
            | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34
            | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 => match __token {
                Token(4, __tok0)
                | Token(5, __tok0)
                | Token(6, __tok0)
                | Token(7, __tok0)
                | Token(8, __tok0)
                | Token(9, __tok0)
                | Token(10, __tok0)
                | Token(11, __tok0)
                | Token(12, __tok0)
                | Token(13, __tok0)
                | Token(14, __tok0)
                | Token(15, __tok0)
                | Token(16, __tok0)
                | Token(17, __tok0)
                | Token(18, __tok0)
                | Token(19, __tok0)
                | Token(20, __tok0)
                | Token(21, __tok0)
                | Token(22, __tok0)
                | Token(23, __tok0)
                | Token(24, __tok0)
                | Token(25, __tok0)
                | Token(26, __tok0)
                | Token(27, __tok0)
                | Token(28, __tok0)
                | Token(29, __tok0)
                | Token(30, __tok0)
                | Token(31, __tok0)
                | Token(32, __tok0)
                | Token(33, __tok0)
                | Token(34, __tok0)
                | Token(35, __tok0)
                | Token(36, __tok0)
                | Token(37, __tok0)
                | Token(38, __tok0)
                | Token(39, __tok0)
                | Token(40, __tok0)
                | Token(41, __tok0)
                | Token(42, __tok0)
                | Token(0, __tok0)
                | Token(1, __tok0)
                | Token(2, __tok0)
                | Token(3, __tok0)
                    if true =>
                {
                    __Symbol::Variant0(__tok0)
                }
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct ItemParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl ItemParser {
        pub fn new() -> ItemParser {
            let __builder = super::__intern_token::new_builder();
            ItemParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<'input>(
            &self,
            input: &'input str,
        ) -> Result<Item<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<'input>(
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Item<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => __reduce0(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            1 => __reduce1(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            2 => __reduce2(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            3 => __reduce3(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            4 => __reduce4(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            5 => __reduce5(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            6 => __reduce6(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            7 => __reduce7(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            8 => __reduce8(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            9 => __reduce9(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            10 => __reduce10(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            11 => __reduce11(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            12 => __reduce12(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            13 => __reduce13(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            14 => __reduce14(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            15 => __reduce15(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            16 => __reduce16(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            17 => __reduce17(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            18 => __reduce18(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            19 => __reduce19(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            20 => __reduce20(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            21 => __reduce21(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            22 => __reduce22(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            23 => __reduce23(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            24 => __reduce24(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            25 => __reduce25(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            26 => __reduce26(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            27 => __reduce27(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            28 => __reduce28(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            29 => __reduce29(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            30 => __reduce30(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            31 => __reduce31(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            32 => __reduce32(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            33 => __reduce33(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            34 => __reduce34(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            35 => __reduce35(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            36 => __reduce36(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            37 => __reduce37(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            38 => __reduce38(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            39 => __reduce39(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            40 => __reduce40(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            41 => __reduce41(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            42 => __reduce42(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            43 => __reduce43(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            44 => __reduce44(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            45 => __reduce45(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            46 => __reduce46(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            47 => __reduce47(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            48 => __reduce48(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            49 => __reduce49(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            50 => __reduce50(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            51 => __reduce51(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            52 => __reduce52(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            53 => __reduce53(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            54 => __reduce54(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            55 => __reduce55(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            56 => __reduce56(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            57 => __reduce57(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            58 => __reduce58(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            59 => __reduce59(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            60 => __reduce60(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            61 => __reduce61(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            62 => __reduce62(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            63 => __reduce63(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            64 => __reduce64(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            65 => __reduce65(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            66 => __reduce66(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            67 => __reduce67(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            68 => __reduce68(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            69 => __reduce69(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            70 => __reduce70(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            71 => __reduce71(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            72 => __reduce72(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            73 => __reduce73(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            74 => __reduce74(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            75 => __reduce75(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            76 => __reduce76(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            77 => __reduce77(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            78 => __reduce78(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            79 => __reduce79(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            80 => __reduce80(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            81 => __reduce81(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            82 => __reduce82(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            83 => __reduce83(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            84 => __reduce84(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            85 => __reduce85(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            86 => __reduce86(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            87 => __reduce87(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            88 => __reduce88(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            89 => __reduce89(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            90 => __reduce90(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            91 => __reduce91(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            92 => __reduce92(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            93 => __reduce93(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            94 => __reduce94(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            95 => __reduce95(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            96 => __reduce96(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            97 => __reduce97(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            98 => __reduce98(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            99 => __reduce99(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            100 => __reduce100(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            101 => __reduce101(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            102 => __reduce102(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            103 => __reduce103(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            104 => __reduce104(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            105 => __reduce105(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            106 => __reduce106(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            107 => __reduce107(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            108 => __reduce108(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            109 => __reduce109(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            110 => __reduce110(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            111 => __reduce111(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            112 => __reduce112(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            113 => __reduce113(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            114 => __reduce114(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            115 => __reduce115(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            116 => __reduce116(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            117 => __reduce117(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            118 => __reduce118(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            119 => __reduce119(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            120 => __reduce120(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            121 => __reduce121(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            122 => __reduce122(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            123 => __reduce123(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            124 => __reduce124(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            125 => __reduce125(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            126 => __reduce126(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            127 => __reduce127(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            128 => __reduce128(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            129 => __reduce129(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            130 => __reduce130(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            131 => __reduce131(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            132 => __reduce132(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            133 => __reduce133(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            134 => __reduce134(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            135 => {
                // __Item = Item => ActionFn(1);
                let __sym0 = __pop_Variant20(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action1(input, __sym0);
                return Some(Ok(__nt));
            }
            136 => __reduce136(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            137 => __reduce137(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            _ => panic!("invalid action code {}", __action),
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant5<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Arg<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant12<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, BinOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant15<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Box<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant7<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Expr<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant19<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Function<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant20<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Item<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant22<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Literal<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant23<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Program<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant26<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Function<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant1<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Type>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant24<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Arg<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant25<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant27<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<&'input str>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant9<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Stmt<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant29<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Type, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant30<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, UnaryOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant14<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant17<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant3<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant6<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant8<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant21<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Item<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant10<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant16<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, bool, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant13<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant18<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant2<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Spanned<Type>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant28<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant4<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant11<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, usize, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant0<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, &'input str, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    pub(crate) fn __reduce0<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>) = "->", Spaned<Type> => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? = "->", Spaned<Type> => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? =  => ActionFn(93);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action93(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>) = "else", Body => ActionFn(75);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action75(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? = "else", Body => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action129(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce5<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? =  => ActionFn(74);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action74(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",") = Arg, "," => ActionFn(109);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action109(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* =  => ActionFn(107);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action107(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* = (<Arg> ",")+ => ActionFn(108);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = Arg, "," => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce10<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = (<Arg> ",")+, Arg, "," => ActionFn(133);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action133(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 6)
    }
    pub(crate) fn __reduce11<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",") = Expr, "," => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action119(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* =  => ActionFn(117);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action117(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce13<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* = (<Expr> ",")+ => ActionFn(118);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = Expr, "," => ActionFn(136);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action136(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce15<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 9)
    }
    pub(crate) fn __reduce16<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";") = Stmt, ";" => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* =  => ActionFn(112);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action112(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce18<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* = (<Stmt> ";")+ => ActionFn(113);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = Stmt, ";" => ActionFn(140);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action140(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce20<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = (<Stmt> ";")+, Stmt, ";" => ActionFn(141);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action141(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce21<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @L =  => ActionFn(104);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action104(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce22<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @R =  => ActionFn(103);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action103(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 14)
    }
    pub(crate) fn __reduce23<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Plus => ActionFn(67);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce24<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Minus => ActionFn(68);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce25<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditiveExpr = Tier<AdditionOp, MultiplicitveExpr> => ActionFn(25);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce26<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AndExpr = Tier<LogicalAnd, EqualityExpr> => ActionFn(22);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce27<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg = Name, ":", Type => ActionFn(9);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action9(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce28<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? = Arg => ActionFn(105);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105(input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce29<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? =  => ActionFn(106);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce30<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Args = "(", Comma<Arg>, ")" => ActionFn(8);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action8(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce31<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BExpr = Expr => ActionFn(20);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20(input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce32<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body, "else", Body => ActionFn(130);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action130(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce33<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce34<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "for", Name, "in", BExpr, Body => ActionFn(34);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant15(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action34(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce35<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "while", BExpr, Body => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action35(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce36<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Name => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce37<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Body => ActionFn(37);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce38<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "(", Expr, ")" => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action38(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce39<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Literal => ActionFn(39);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Body = "{", Semi<Stmt>, "}" => ActionFn(14);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action14(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce41<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "true" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "false" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce43<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = Arg => ActionFn(154);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action154(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce44<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> =  => ActionFn(155);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action155(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce45<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+, Arg => ActionFn(156);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action156(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce46<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+ => ActionFn(157);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce47<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = Expr => ActionFn(158);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action158(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce48<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> =  => ActionFn(159);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action159(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce49<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+, Expr => ActionFn(160);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action160(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce50<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+ => ActionFn(161);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action161(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonExpr = Tier<ComparisonOp, AdditiveExpr> => ActionFn(24);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce52<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThan => ActionFn(63);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce53<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThan => ActionFn(64);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce54<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThanEquals => ActionFn(65);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce55<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThanEquals => ActionFn(66);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce56<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Devide = "/" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce57<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityExpr = Tier<EqualityOp, ComparisonExpr> => ActionFn(23);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce58<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = Equals => ActionFn(61);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce59<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = NotEquals => ActionFn(62);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce60<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Equals = "==" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce61<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr = OrExpr => ActionFn(19);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce62<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? = Expr => ActionFn(115);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115(input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce63<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? =  => ActionFn(116);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce64<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // FloatLit = r#"[+-]?[0-9]+[.][0-9]*"# => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce65<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, "->", Spaned<Type>, Spaned<Body> => ActionFn(127);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant25(__symbols);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action127(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (6, 36)
    }
    pub(crate) fn __reduce66<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, Spaned<Body> => ActionFn(128);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant25(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action128(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 36)
    }
    pub(crate) fn __reduce67<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThan = ">" => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThanEquals = ">=" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce69<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // IntLit = r#"[0-9]+"# => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce70<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item = Spaned<Function> => ActionFn(6);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce71<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* =  => ActionFn(99);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 41)
    }
    pub(crate) fn __reduce72<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* = Item+ => ActionFn(100);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce73<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item => ActionFn(101);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce74<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item+, Item => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 42)
    }
    pub(crate) fn __reduce75<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThan = "<" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce76<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThanEquals = "<=" => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce77<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = StringLit => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce78<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = FloatLit => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce79<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = IntLit => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce80<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = BoolLit => ActionFn(43);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce81<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalAnd = "&&" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce82<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalOr = "||" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce83<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Minus = "-" => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce84<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Times => ActionFn(69);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce85<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Devide => ActionFn(70);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce86<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicitveExpr = Tier<MultiplicationOp, UnaryExpr> => ActionFn(26);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce87<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Name = r#"[a-zA-Z][a-zA-Z0-9_]*"# => ActionFn(13);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce88<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // NotEquals = "!=" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce89<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // OrExpr = Tier<LogicalOr, AndExpr> => ActionFn(21);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce90<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Plus = "+" => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce91<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = BaseExpr => ActionFn(29);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce92<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "[", Expr, "]" => ActionFn(30);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action30(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce93<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "(", Comma<Expr>, ")" => ActionFn(31);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action31(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce94<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, ".", Name => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 55)
    }
    pub(crate) fn __reduce95<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program =  => ActionFn(162);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action162(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce96<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program = Item+ => ActionFn(163);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action163(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce97<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = Stmt => ActionFn(164);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action164(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce98<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> =  => ActionFn(165);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action165(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce99<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+, Stmt => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action166(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce100<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+ => ActionFn(167);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce101<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Args> = Args => ActionFn(149);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action149(input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce102<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Body> = Body => ActionFn(150);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action150(input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce103<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Function> = Function => ActionFn(151);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action151(input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce104<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Name> = Name => ActionFn(152);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action152(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce105<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Type> = Type => ActionFn(153);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action153(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce106<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = Expr => ActionFn(15);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce107<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "let", Name, "=", Expr => ActionFn(16);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant7(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (4, 63)
    }
    pub(crate) fn __reduce108<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "print", Expr => ActionFn(17);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action17(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce109<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "return", Expr => ActionFn(18);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action18(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce110<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? = Stmt => ActionFn(110);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action110(input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce111<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? =  => ActionFn(111);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 64)
    }
    pub(crate) fn __reduce112<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // StringLit = r#"\"(\\\\.|[^\"\\\\])*\""# => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce113<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = Tier<AdditionOp, MultiplicitveExpr>, AdditionOp, MultiplicitveExpr => ActionFn(79);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action79(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce114<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = MultiplicitveExpr => ActionFn(80);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce115<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = Tier<ComparisonOp, AdditiveExpr>, ComparisonOp, AdditiveExpr => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce116<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = AdditiveExpr => ActionFn(82);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce117<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = Tier<EqualityOp, ComparisonExpr>, EqualityOp, ComparisonExpr => ActionFn(83);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action83(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce118<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = ComparisonExpr => ActionFn(84);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce119<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = Tier<LogicalAnd, EqualityExpr>, LogicalAnd, EqualityExpr => ActionFn(85);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action85(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 69)
    }
    pub(crate) fn __reduce120<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = EqualityExpr => ActionFn(86);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce121<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = Tier<LogicalOr, AndExpr>, LogicalOr, AndExpr => ActionFn(87);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action87(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 70)
    }
    pub(crate) fn __reduce122<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = AndExpr => ActionFn(88);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce123<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = Tier<MultiplicationOp, UnaryExpr>, MultiplicationOp, UnaryExpr => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action77(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce124<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = UnaryExpr => ActionFn(78);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce125<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Times = "*" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce126<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "int" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce127<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "bool" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce128<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "string" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce129<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = PostfixExpr => ActionFn(27);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce130<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = UnaryOp, UnaryExpr => ActionFn(28);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action28(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 74)
    }
    pub(crate) fn __reduce131<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "!" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce132<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "-" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce133<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Expr = Expr => ActionFn(4);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce134<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Function = Function => ActionFn(2);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce136<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Program = Program => ActionFn(0);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce137<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Stmt = Stmt => ActionFn(3);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 80)
    }
}
pub use self::__parse__Item::ItemParser;

mod __parse__Program {
    #![allow(
        non_snake_case,
        non_camel_case_types,
        unused_mut,
        unused_variables,
        unused_imports,
        unused_parens
    )]

    use crate::ast::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate alloc;
    extern crate core;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input> {
        Variant0(&'input str),
        Variant1(Spanned<Type>),
        Variant2(core::option::Option<Spanned<Type>>),
        Variant3(Vec<Stmt<'input>>),
        Variant4(core::option::Option<Vec<Stmt<'input>>>),
        Variant5(Arg<'input>),
        Variant6(alloc::vec::Vec<Arg<'input>>),
        Variant7(Expr<'input>),
        Variant8(alloc::vec::Vec<Expr<'input>>),
        Variant9(Stmt<'input>),
        Variant10(alloc::vec::Vec<Stmt<'input>>),
        Variant11(usize),
        Variant12(BinOp),
        Variant13(core::option::Option<Arg<'input>>),
        Variant14(Vec<Arg<'input>>),
        Variant15(Box<Expr<'input>>),
        Variant16(bool),
        Variant17(Vec<Expr<'input>>),
        Variant18(core::option::Option<Expr<'input>>),
        Variant19(Function<'input>),
        Variant20(Item<'input>),
        Variant21(alloc::vec::Vec<Item<'input>>),
        Variant22(Literal<'input>),
        Variant23(Program<'input>),
        Variant24(Spanned<Vec<Arg<'input>>>),
        Variant25(Spanned<Vec<Stmt<'input>>>),
        Variant26(Spanned<Function<'input>>),
        Variant27(Spanned<&'input str>),
        Variant28(core::option::Option<Stmt<'input>>),
        Variant29(Type),
        Variant30(UnaryOp),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, // State 3
        0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, // State 5
        0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 58,
        0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 7
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 22, 23, 24, 0, 82, 25, 8, 0, -99, 83, 84, 85, 49, // State 8
        0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, // State 10
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 22, 23, 24, 0, 82, 25, 8, 0, -101, 83, 84, 85, 49, // State 11
        0, -26, -26, 0, -26, 0, 95, -26, 96, 0, 0, 0, 0, -26, -26, -26, 0, -26, -26, -26, 0, -26,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, 0, 0, 0, 0, // State 12
        0, -52, -52, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, -52, 101, 102, 0, -52, 103, 104, 0, -52, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, -52, 0, 0, 0, 0, // State 13
        0, 107, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, 0, -58, 0, 0, 0, 108, 0, 0, 0, -58, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, 0, 0, 0, // State 14
        0, 0, 109, 0, -27, 0, 0, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, -27, 0, 0, 0, 0, // State 15
        0, 0, 0, 0, -90, 0, 0, -90, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -90, 110, -90, 0, 0, 0, 0, // State 16
        0, -87, -87, 0, -87, 113, -87, -87, -87, 0, 0, 114, 0, -87, -87, -87, 0, -87, -87, -87, 0,
        -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, -87, -87, 0, 0, 0, 0,
        // State 17
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21, 0,
        0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 18
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, // State 20
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, // State 22
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 23
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 24
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 58,
        0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 26
        79, 0, 0, 19, -49, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, // State 28
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 29
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 30
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 31
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 32
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 33
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 34
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, // State 37
        79, 0, 0, 19, -51, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 38
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 39
        79, 0, 0, 19, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 20, 21,
        0, 0, 0, 0, 0, 0, 82, 25, 8, 0, 0, 83, 84, 85, 49, // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 47
        0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 48
        0, -88, -88, -88, -88, -88, -88, -88, -88, 0, -88, -88, -88, -88, -88, -88, -88, -88, -88,
        -88, -88, -88, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, -88, -88, -88, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 52
        0, 0, 0, 0, -44, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 53
        0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -106, 0, 0, 0, 0, 0, 0, // State 56
        0, 0, 0, 0, -128, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, // State 57
        0, 0, 0, 0, -127, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, // State 58
        0, 0, 0, 0, -129, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, // State 59
        0, -117, -117, 0, -117, 0, 0, -117, 0, 0, 0, 0, 0, -117, -117, -117, 0, -117, -117, -117,
        0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, -117, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, -123, 0, 0, -123, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -123, -123, -123, 0, 0, 0, 0, // State 61
        0, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92, -92, 0, -92, -92, -92, 0, -92, -92, -92,
        -92, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, -92, 0, 0, 0, 0,
        // State 62
        0, -38, -38, -38, -38, -38, -38, -38, -38, 0, -38, -38, 0, -38, -38, -38, 0, -38, -38, -38,
        -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, -38, 0, 0, 0, 0,
        // State 63
        0, -81, -81, -81, -81, -81, -81, -81, -81, 0, -81, -81, 0, -81, -81, -81, 0, -81, -81, -81,
        -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, -81, 0, 0, 0, 0,
        // State 64
        0, -119, -119, 0, -119, 0, 0, -119, 0, 0, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, -119, 0, 0, 0, 0, // State 65
        0, 0, -121, 0, -121, 0, 0, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, -121, -121, 0, 0, 0, 0, // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, // State 67
        0, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79, -79, 0, -79, -79, -79, 0, -79, -79, -79,
        -79, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, -79, 0, 0, 0, 0,
        // State 68
        0, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80, -80, 0, -80, -80, -80, 0, -80, -80, -80,
        -80, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, -80, 0, 0, 0, 0,
        // State 69
        0, -40, -40, -40, -40, -40, -40, -40, -40, 0, -40, -40, 0, -40, -40, -40, 0, -40, -40, -40,
        -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, -40, 0, 0, 0, 0,
        // State 70
        0, -115, -115, 0, -115, 0, -115, -115, -115, 0, 0, 0, 0, -115, -115, -115, 0, -115, -115,
        -115, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, 0, 0, 0, 0,
        // State 71
        0, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, 0, -37, -37, -37, 0, -37, -37, -37,
        -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, -37, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -62, 0, -62, 0, 0, 0, 0, // State 73
        0, -130, -130, 27, -130, -130, -130, -130, -130, 0, 28, -130, 0, -130, -130, -130, 0, -130,
        -130, -130, 29, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, -130, -130, 0, 0, 0,
        0, // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, // State 76
        0, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78, -78, 0, -78, -78, -78, 0, -78, -78, -78,
        -78, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, -78, 0, 0, 0, 0,
        // State 77
        0, -125, -125, 0, -125, -125, -125, -125, -125, 0, 0, -125, 0, -125, -125, -125, 0, -125,
        -125, -125, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, -125, 0, 0, 0,
        0, // State 78
        -132, 0, 0, -132, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0,
        -132, -132, 0, 0, 0, 0, 0, 0, -132, -132, -132, 0, 0, -132, -132, -132, -132,
        // State 79
        -133, 0, 0, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0,
        -133, -133, 0, 0, 0, 0, 0, 0, -133, -133, -133, 0, 0, -133, -133, -133, -133,
        // State 80
        0, -43, -43, -43, -43, -43, -43, -43, -43, 0, -43, -43, 0, -43, -43, -43, 0, -43, -43, -43,
        -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, -43, 0, 0, 0, 0,
        // State 81
        0, -42, -42, -42, -42, -42, -42, -42, -42, 0, -42, -42, 0, -42, -42, -42, 0, -42, -42, -42,
        -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, 0, 0, 0, 0,
        // State 82
        0, -113, -113, -113, -113, -113, -113, -113, -113, 0, -113, -113, 0, -113, -113, -113, 0,
        -113, -113, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113,
        0, 0, 0, 0, // State 83
        0, -65, -65, -65, -65, -65, -65, -65, -65, 0, -65, -65, 0, -65, -65, -65, 0, -65, -65, -65,
        -65, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, -65, 0, 0, 0, 0,
        // State 84
        0, -70, -70, -70, -70, -70, -70, -70, -70, 0, -70, -70, 0, -70, -70, -70, 0, -70, -70, -70,
        -70, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, -70, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, -46, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 86
        0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, // State 90
        0, -41, -41, -41, -41, -41, -41, -41, -41, 0, -41, -41, 0, -41, -41, -41, 0, -41, -41, -41,
        -41, -41, 0, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41, -41, 0, 0, 0, 0,
        // State 91
        -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20,
        -20, 0, 0, -20, -20, -20, 0, -20, -20, -20, 0, -20, -20, -20, -20, -20,
        // State 92
        -25, 0, 0, -25, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, -25,
        -25, 0, 0, 0, 0, 0, 0, -25, -25, -25, 0, 0, -25, -25, -25, -25, // State 93
        -24, 0, 0, -24, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24,
        -24, 0, 0, 0, 0, 0, 0, -24, -24, -24, 0, 0, -24, -24, -24, -24, // State 94
        -91, 0, 0, -91, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91,
        -91, 0, 0, 0, 0, 0, 0, -91, -91, -91, 0, 0, -91, -91, -91, -91, // State 95
        -84, 0, 0, -84, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, -84,
        -84, 0, 0, 0, 0, 0, 0, -84, -84, -84, 0, 0, -84, -84, -84, -84, // State 96
        -54, 0, 0, -54, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, -54,
        -54, 0, 0, 0, 0, 0, 0, -54, -54, -54, 0, 0, -54, -54, -54, -54, // State 97
        -56, 0, 0, -56, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, -56,
        -56, 0, 0, 0, 0, 0, 0, -56, -56, -56, 0, 0, -56, -56, -56, -56, // State 98
        -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, -53,
        -53, 0, 0, 0, 0, 0, 0, -53, -53, -53, 0, 0, -53, -53, -53, -53, // State 99
        -55, 0, 0, -55, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, -55,
        -55, 0, 0, 0, 0, 0, 0, -55, -55, -55, 0, 0, -55, -55, -55, -55, // State 100
        -76, 0, 0, -76, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76,
        -76, 0, 0, 0, 0, 0, 0, -76, -76, -76, 0, 0, -76, -76, -76, -76, // State 101
        -77, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, -77,
        -77, 0, 0, 0, 0, 0, 0, -77, -77, -77, 0, 0, -77, -77, -77, -77, // State 102
        -68, 0, 0, -68, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, -68,
        -68, 0, 0, 0, 0, 0, 0, -68, -68, -68, 0, 0, -68, -68, -68, -68, // State 103
        -69, 0, 0, -69, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, -69,
        -69, 0, 0, 0, 0, 0, 0, -69, -69, -69, 0, 0, -69, -69, -69, -69, // State 104
        -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, -59,
        -59, 0, 0, 0, 0, 0, 0, -59, -59, -59, 0, 0, -59, -59, -59, -59, // State 105
        -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, -60,
        -60, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, 0, -60, -60, -60, -60, // State 106
        -89, 0, 0, -89, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89,
        -89, 0, 0, 0, 0, 0, 0, -89, -89, -89, 0, 0, -89, -89, -89, -89, // State 107
        -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, -61,
        -61, 0, 0, 0, 0, 0, 0, -61, -61, -61, 0, 0, -61, -61, -61, -61, // State 108
        -82, 0, 0, -82, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82,
        -82, 0, 0, 0, 0, 0, 0, -82, -82, -82, 0, 0, -82, -82, -82, -82, // State 109
        -83, 0, 0, -83, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, -83,
        -83, 0, 0, 0, 0, 0, 0, -83, -83, -83, 0, 0, -83, -83, -83, -83, // State 110
        -86, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86,
        -86, 0, 0, 0, 0, 0, 0, -86, -86, -86, 0, 0, -86, -86, -86, -86, // State 111
        -85, 0, 0, -85, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85,
        -85, 0, 0, 0, 0, 0, 0, -85, -85, -85, 0, 0, -85, -85, -85, -85, // State 112
        -126, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0,
        -126, -126, 0, 0, 0, 0, 0, 0, -126, -126, -126, 0, 0, -126, -126, -126, -126,
        // State 113
        -57, 0, 0, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, -57,
        -57, 0, 0, 0, 0, 0, 0, -57, -57, -57, 0, 0, -57, -57, -57, -57, // State 114
        0, -131, -131, 0, -131, -131, -131, -131, -131, 0, 0, -131, 0, -131, -131, -131, 0, -131,
        -131, -131, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -131, -131, 0, 0, 0,
        0, // State 115
        0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, // State 120
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, // State 121
        0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, // State 122
        0, 0, 0, 0, -28, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 123
        -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21,
        -21, 0, 0, -21, -21, -21, 0, -21, -21, -21, 0, -21, -21, -21, -21, -21,
        // State 124
        0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 125
        0, 0, 0, 0, -48, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 126
        0, -95, -95, -95, -95, -95, -95, -95, -95, 0, -95, -95, 0, -95, -95, -95, 0, -95, -95, -95,
        -95, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, -95, -95, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 128
        0, -114, -114, 0, -114, 0, -114, -114, -114, 0, 0, 0, 0, -114, -114, -114, 0, -114, -114,
        -114, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, 0, 0, 0, 0,
        // State 129
        0, -116, -116, 0, -116, 0, 0, -116, 0, 0, 0, 0, 0, -116, -116, -116, 0, -116, -116, -116, 0,
        -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, 0, 0, 0, 0,
        // State 130
        0, -118, -118, 0, -118, 0, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, -118, 0, 0, 0, 0, // State 131
        0, 0, -120, 0, -120, 0, 0, -120, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0, 0, 0, // State 132
        0, 0, 0, 0, -122, 0, 0, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, -122, 0, 0, 0, 0, // State 133
        0, -124, -124, 0, -124, -124, -124, -124, -124, 0, 0, -124, 0, -124, -124, -124, 0, -124,
        -124, -124, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, -124, 0, 0, 0,
        0, // State 134
        0, -39, -39, -39, -39, -39, -39, -39, -39, 0, -39, -39, 0, -39, -39, -39, 0, -39, -39, -39,
        -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -39, -39, 0, 0, 0, 0,
        // State 135
        0, -34, -34, -34, -34, -34, -34, -34, -34, 0, -34, -34, 0, -34, -34, -34, 0, -34, -34, -34,
        -34, -34, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, -34, -34, 0, 0, 0, 0,
        // State 136
        0, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, -36, 0, -36, -36, -36, 0, -36, -36, -36,
        -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36, -36, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, -50, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 138
        0, -94, -94, -94, -94, -94, -94, -94, -94, 0, -94, -94, 0, -94, -94, -94, 0, -94, -94, -94,
        -94, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, -94, 0, 0, 0, 0,
        // State 139
        -15, 0, 0, -15, -15, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15,
        -15, 0, 0, 0, 0, 0, 0, -15, -15, -15, 0, 0, -15, -15, -15, -15, // State 140
        0, -93, -93, -93, -93, -93, -93, -93, -93, 0, -93, -93, 0, -93, -93, -93, 0, -93, -93, -93,
        -93, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, -93, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, // State 142
        -16, 0, 0, -16, -16, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0,
        -16, -16, 0, 0, 0, 0, 0, 0, -16, -16, -16, 0, 0, -16, -16, -16, -16, // State 143
        0, -35, -35, -35, -35, -35, -35, -35, -35, 0, -35, -35, 0, -35, -35, -35, 0, -35, -35, -35,
        -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -35, 0, 0, 0, 0,
        // State 144
        0, -33, -33, -33, -33, -33, -33, -33, -33, 0, -33, -33, 0, -33, -33, -33, 0, -33, -33, -33,
        -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -33, -33, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 43 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -96,  // State 1
        -97,  // State 2
        0,    // State 3
        0,    // State 4
        0,    // State 5
        0,    // State 6
        0,    // State 7
        0,    // State 8
        0,    // State 9
        0,    // State 10
        0,    // State 11
        0,    // State 12
        0,    // State 13
        0,    // State 14
        0,    // State 15
        0,    // State 16
        0,    // State 17
        0,    // State 18
        0,    // State 19
        0,    // State 20
        0,    // State 21
        0,    // State 22
        0,    // State 23
        0,    // State 24
        0,    // State 25
        0,    // State 26
        0,    // State 27
        0,    // State 28
        0,    // State 29
        0,    // State 30
        0,    // State 31
        0,    // State 32
        0,    // State 33
        0,    // State 34
        0,    // State 35
        0,    // State 36
        0,    // State 37
        0,    // State 38
        0,    // State 39
        0,    // State 40
        0,    // State 41
        0,    // State 42
        -104, // State 43
        -74,  // State 44
        -137, // State 45
        -71,  // State 46
        -75,  // State 47
        0,    // State 48
        0,    // State 49
        0,    // State 50
        -103, // State 51
        -67,  // State 52
        0,    // State 53
        0,    // State 54
        0,    // State 55
        0,    // State 56
        0,    // State 57
        0,    // State 58
        0,    // State 59
        0,    // State 60
        0,    // State 61
        0,    // State 62
        0,    // State 63
        0,    // State 64
        0,    // State 65
        0,    // State 66
        0,    // State 67
        0,    // State 68
        0,    // State 69
        0,    // State 70
        0,    // State 71
        0,    // State 72
        0,    // State 73
        0,    // State 74
        0,    // State 75
        0,    // State 76
        0,    // State 77
        0,    // State 78
        0,    // State 79
        0,    // State 80
        0,    // State 81
        0,    // State 82
        0,    // State 83
        0,    // State 84
        0,    // State 85
        0,    // State 86
        0,    // State 87
        0,    // State 88
        -66,  // State 89
        0,    // State 90
        -41,  // State 91
        0,    // State 92
        0,    // State 93
        0,    // State 94
        0,    // State 95
        0,    // State 96
        0,    // State 97
        0,    // State 98
        0,    // State 99
        0,    // State 100
        0,    // State 101
        0,    // State 102
        0,    // State 103
        0,    // State 104
        0,    // State 105
        0,    // State 106
        0,    // State 107
        0,    // State 108
        0,    // State 109
        0,    // State 110
        0,    // State 111
        0,    // State 112
        0,    // State 113
        0,    // State 114
        0,    // State 115
        0,    // State 116
        0,    // State 117
        0,    // State 118
        0,    // State 119
        0,    // State 120
        0,    // State 121
        0,    // State 122
        0,    // State 123
        0,    // State 124
        0,    // State 125
        0,    // State 126
        0,    // State 127
        0,    // State 128
        0,    // State 129
        0,    // State 130
        0,    // State 131
        0,    // State 132
        0,    // State 133
        0,    // State 134
        0,    // State 135
        0,    // State 136
        0,    // State 137
        0,    // State 138
        0,    // State 139
        0,    // State 140
        0,    // State 141
        0,    // State 142
        0,    // State 143
        0,    // State 144
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            6 => 8,
            9 => 37,
            12 => 10,
            15 => 29,
            16 => match state {
                30 => 129,
                _ => 59,
            },
            17 => match state {
                33 => 132,
                _ => 60,
            },
            18 => match state {
                8 => 85,
                _ => 52,
            },
            20 => 49,
            21 => match state {
                24 => 36,
                38 => 40,
                _ => 35,
            },
            22 => 61,
            23 => match state {
                4 | 9 => 50,
                35 => 135,
                36 => 136,
                40 => 143,
                41 => 144,
                _ => 62,
            },
            24 => 63,
            25 => 53,
            26 => 124,
            27 => match state {
                31 => 130,
                _ => 64,
            },
            28 => 30,
            29 => 110,
            30 => match state {
                32 => 131,
                _ => 65,
            },
            31 => 31,
            32 => 104,
            33 => match state {
                7 | 10 => 66,
                18 => 115,
                22 => 119,
                23 => 120,
                26 => 125,
                28 => 127,
                37 => 137,
                39 => 141,
                _ => 117,
            },
            35 => 67,
            36 => 42,
            37 => 96,
            38 => 97,
            39 => 68,
            40 => match state {
                1 => 46,
                _ => 43,
            },
            42 => 1,
            43 => 98,
            44 => 99,
            45 => 69,
            46 => 32,
            47 => 33,
            48 => 92,
            49 => 34,
            50 => match state {
                29 => 128,
                _ => 70,
            },
            51 => match state {
                2 => 47,
                5 | 8 => 54,
                19 => 116,
                21 => 118,
                27 => 126,
                _ => 71,
            },
            52 => 105,
            53 => 72,
            54 => 93,
            55 => 73,
            56 => 44,
            57 => 74,
            58 => 4,
            59 => match state {
                9 => 88,
                _ => 51,
            },
            60 => 45,
            61 => 3,
            62 => 9,
            63 => match state {
                10 => 89,
                _ => 75,
            },
            65 => 76,
            66 => 11,
            67 => 12,
            68 => 13,
            69 => 14,
            70 => 15,
            71 => 16,
            72 => 111,
            73 => match state {
                25 => 122,
                _ => 55,
            },
            74 => match state {
                17 => 114,
                34 => 133,
                _ => 77,
            },
            75 => 17,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""[""###,
            r###""]""###,
            r###""bool""###,
            r###""else""###,
            r###""false""###,
            r###""fn""###,
            r###""for""###,
            r###""if""###,
            r###""in""###,
            r###""int""###,
            r###""let""###,
            r###""print""###,
            r###""return""###,
            r###""string""###,
            r###""true""###,
            r###""while""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"r#"\"(\\\\.|[^\"\\\\])*\""#"###,
            r###"r#"[+-]?[0-9]+[.][0-9]*"#"###,
            r###"r#"[0-9]+"#"###,
            r###"r#"[a-zA-Z][a-zA-Z0-9_]*"#"###,
        ];
        __TERMINAL
            .iter()
            .enumerate()
            .filter_map(|(index, terminal)| {
                let next_state = __action(__state, index);
                if next_state == 0 {
                    None
                } else {
                    Some(alloc::string::ToString::to_string(terminal))
                }
            })
            .collect()
    }
    pub(crate) struct __StateMachine<'input> {
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input> {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Program<'input>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
            Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
            0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 43 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<'input>(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize> {
        match *__token {
            Token(4, _) if true => Some(0),
            Token(5, _) if true => Some(1),
            Token(6, _) if true => Some(2),
            Token(7, _) if true => Some(3),
            Token(8, _) if true => Some(4),
            Token(9, _) if true => Some(5),
            Token(10, _) if true => Some(6),
            Token(11, _) if true => Some(7),
            Token(12, _) if true => Some(8),
            Token(13, _) if true => Some(9),
            Token(14, _) if true => Some(10),
            Token(15, _) if true => Some(11),
            Token(16, _) if true => Some(12),
            Token(17, _) if true => Some(13),
            Token(18, _) if true => Some(14),
            Token(19, _) if true => Some(15),
            Token(20, _) if true => Some(16),
            Token(21, _) if true => Some(17),
            Token(22, _) if true => Some(18),
            Token(23, _) if true => Some(19),
            Token(24, _) if true => Some(20),
            Token(25, _) if true => Some(21),
            Token(26, _) if true => Some(22),
            Token(27, _) if true => Some(23),
            Token(28, _) if true => Some(24),
            Token(29, _) if true => Some(25),
            Token(30, _) if true => Some(26),
            Token(31, _) if true => Some(27),
            Token(32, _) if true => Some(28),
            Token(33, _) if true => Some(29),
            Token(34, _) if true => Some(30),
            Token(35, _) if true => Some(31),
            Token(36, _) if true => Some(32),
            Token(37, _) if true => Some(33),
            Token(38, _) if true => Some(34),
            Token(39, _) if true => Some(35),
            Token(40, _) if true => Some(36),
            Token(41, _) if true => Some(37),
            Token(42, _) if true => Some(38),
            Token(0, _) if true => Some(39),
            Token(1, _) if true => Some(40),
            Token(2, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            _ => None,
        }
    }
    fn __token_to_symbol<'input>(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input> {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18
            | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34
            | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 => match __token {
                Token(4, __tok0)
                | Token(5, __tok0)
                | Token(6, __tok0)
                | Token(7, __tok0)
                | Token(8, __tok0)
                | Token(9, __tok0)
                | Token(10, __tok0)
                | Token(11, __tok0)
                | Token(12, __tok0)
                | Token(13, __tok0)
                | Token(14, __tok0)
                | Token(15, __tok0)
                | Token(16, __tok0)
                | Token(17, __tok0)
                | Token(18, __tok0)
                | Token(19, __tok0)
                | Token(20, __tok0)
                | Token(21, __tok0)
                | Token(22, __tok0)
                | Token(23, __tok0)
                | Token(24, __tok0)
                | Token(25, __tok0)
                | Token(26, __tok0)
                | Token(27, __tok0)
                | Token(28, __tok0)
                | Token(29, __tok0)
                | Token(30, __tok0)
                | Token(31, __tok0)
                | Token(32, __tok0)
                | Token(33, __tok0)
                | Token(34, __tok0)
                | Token(35, __tok0)
                | Token(36, __tok0)
                | Token(37, __tok0)
                | Token(38, __tok0)
                | Token(39, __tok0)
                | Token(40, __tok0)
                | Token(41, __tok0)
                | Token(42, __tok0)
                | Token(0, __tok0)
                | Token(1, __tok0)
                | Token(2, __tok0)
                | Token(3, __tok0)
                    if true =>
                {
                    __Symbol::Variant0(__tok0)
                }
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct ProgramParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl ProgramParser {
        pub fn new() -> ProgramParser {
            let __builder = super::__intern_token::new_builder();
            ProgramParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<'input>(
            &self,
            input: &'input str,
        ) -> Result<Program<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<'input>(
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<
        Result<Program<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>,
    > {
        let (__pop_states, __nonterminal) = match __action {
            0 => __reduce0(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            1 => __reduce1(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            2 => __reduce2(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            3 => __reduce3(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            4 => __reduce4(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            5 => __reduce5(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            6 => __reduce6(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            7 => __reduce7(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            8 => __reduce8(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            9 => __reduce9(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            10 => __reduce10(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            11 => __reduce11(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            12 => __reduce12(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            13 => __reduce13(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            14 => __reduce14(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            15 => __reduce15(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            16 => __reduce16(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            17 => __reduce17(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            18 => __reduce18(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            19 => __reduce19(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            20 => __reduce20(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            21 => __reduce21(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            22 => __reduce22(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            23 => __reduce23(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            24 => __reduce24(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            25 => __reduce25(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            26 => __reduce26(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            27 => __reduce27(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            28 => __reduce28(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            29 => __reduce29(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            30 => __reduce30(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            31 => __reduce31(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            32 => __reduce32(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            33 => __reduce33(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            34 => __reduce34(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            35 => __reduce35(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            36 => __reduce36(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            37 => __reduce37(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            38 => __reduce38(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            39 => __reduce39(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            40 => __reduce40(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            41 => __reduce41(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            42 => __reduce42(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            43 => __reduce43(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            44 => __reduce44(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            45 => __reduce45(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            46 => __reduce46(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            47 => __reduce47(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            48 => __reduce48(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            49 => __reduce49(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            50 => __reduce50(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            51 => __reduce51(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            52 => __reduce52(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            53 => __reduce53(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            54 => __reduce54(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            55 => __reduce55(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            56 => __reduce56(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            57 => __reduce57(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            58 => __reduce58(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            59 => __reduce59(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            60 => __reduce60(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            61 => __reduce61(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            62 => __reduce62(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            63 => __reduce63(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            64 => __reduce64(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            65 => __reduce65(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            66 => __reduce66(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            67 => __reduce67(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            68 => __reduce68(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            69 => __reduce69(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            70 => __reduce70(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            71 => __reduce71(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            72 => __reduce72(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            73 => __reduce73(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            74 => __reduce74(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            75 => __reduce75(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            76 => __reduce76(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            77 => __reduce77(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            78 => __reduce78(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            79 => __reduce79(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            80 => __reduce80(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            81 => __reduce81(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            82 => __reduce82(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            83 => __reduce83(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            84 => __reduce84(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            85 => __reduce85(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            86 => __reduce86(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            87 => __reduce87(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            88 => __reduce88(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            89 => __reduce89(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            90 => __reduce90(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            91 => __reduce91(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            92 => __reduce92(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            93 => __reduce93(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            94 => __reduce94(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            95 => __reduce95(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            96 => __reduce96(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            97 => __reduce97(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            98 => __reduce98(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            99 => __reduce99(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            100 => __reduce100(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            101 => __reduce101(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            102 => __reduce102(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            103 => __reduce103(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            104 => __reduce104(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            105 => __reduce105(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            106 => __reduce106(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            107 => __reduce107(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            108 => __reduce108(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            109 => __reduce109(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            110 => __reduce110(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            111 => __reduce111(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            112 => __reduce112(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            113 => __reduce113(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            114 => __reduce114(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            115 => __reduce115(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            116 => __reduce116(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            117 => __reduce117(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            118 => __reduce118(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            119 => __reduce119(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            120 => __reduce120(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            121 => __reduce121(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            122 => __reduce122(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            123 => __reduce123(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            124 => __reduce124(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            125 => __reduce125(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            126 => __reduce126(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            127 => __reduce127(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            128 => __reduce128(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            129 => __reduce129(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            130 => __reduce130(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            131 => __reduce131(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            132 => __reduce132(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            133 => __reduce133(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            134 => __reduce134(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            135 => __reduce135(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            136 => {
                // __Program = Program => ActionFn(0);
                let __sym0 = __pop_Variant23(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0(input, __sym0);
                return Some(Ok(__nt));
            }
            137 => __reduce137(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            _ => panic!("invalid action code {}", __action),
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant5<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Arg<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant12<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, BinOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant15<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Box<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant7<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Expr<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant19<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Function<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant20<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Item<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant22<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Literal<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant23<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Program<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant26<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Function<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant1<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Type>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant24<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Arg<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant25<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant27<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<&'input str>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant9<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Stmt<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant29<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Type, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant30<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, UnaryOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant14<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant17<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant3<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant6<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant8<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant21<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Item<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant10<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant16<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, bool, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant13<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant18<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant2<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Spanned<Type>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant28<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant4<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant11<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, usize, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant0<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, &'input str, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    pub(crate) fn __reduce0<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>) = "->", Spaned<Type> => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? = "->", Spaned<Type> => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? =  => ActionFn(93);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action93(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>) = "else", Body => ActionFn(75);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action75(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? = "else", Body => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action129(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce5<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? =  => ActionFn(74);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action74(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",") = Arg, "," => ActionFn(109);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action109(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* =  => ActionFn(107);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action107(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* = (<Arg> ",")+ => ActionFn(108);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = Arg, "," => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce10<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = (<Arg> ",")+, Arg, "," => ActionFn(133);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action133(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 6)
    }
    pub(crate) fn __reduce11<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",") = Expr, "," => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action119(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* =  => ActionFn(117);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action117(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce13<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* = (<Expr> ",")+ => ActionFn(118);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = Expr, "," => ActionFn(136);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action136(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce15<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 9)
    }
    pub(crate) fn __reduce16<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";") = Stmt, ";" => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* =  => ActionFn(112);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action112(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce18<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* = (<Stmt> ";")+ => ActionFn(113);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = Stmt, ";" => ActionFn(140);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action140(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce20<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = (<Stmt> ";")+, Stmt, ";" => ActionFn(141);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action141(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce21<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @L =  => ActionFn(104);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action104(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce22<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @R =  => ActionFn(103);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action103(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 14)
    }
    pub(crate) fn __reduce23<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Plus => ActionFn(67);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce24<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Minus => ActionFn(68);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce25<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditiveExpr = Tier<AdditionOp, MultiplicitveExpr> => ActionFn(25);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce26<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AndExpr = Tier<LogicalAnd, EqualityExpr> => ActionFn(22);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce27<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg = Name, ":", Type => ActionFn(9);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action9(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce28<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? = Arg => ActionFn(105);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105(input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce29<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? =  => ActionFn(106);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce30<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Args = "(", Comma<Arg>, ")" => ActionFn(8);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action8(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce31<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BExpr = Expr => ActionFn(20);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20(input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce32<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body, "else", Body => ActionFn(130);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action130(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce33<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce34<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "for", Name, "in", BExpr, Body => ActionFn(34);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant15(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action34(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce35<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "while", BExpr, Body => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action35(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce36<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Name => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce37<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Body => ActionFn(37);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce38<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "(", Expr, ")" => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action38(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce39<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Literal => ActionFn(39);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Body = "{", Semi<Stmt>, "}" => ActionFn(14);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action14(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce41<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "true" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "false" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce43<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = Arg => ActionFn(154);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action154(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce44<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> =  => ActionFn(155);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action155(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce45<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+, Arg => ActionFn(156);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action156(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce46<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+ => ActionFn(157);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce47<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = Expr => ActionFn(158);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action158(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce48<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> =  => ActionFn(159);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action159(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce49<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+, Expr => ActionFn(160);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action160(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce50<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+ => ActionFn(161);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action161(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonExpr = Tier<ComparisonOp, AdditiveExpr> => ActionFn(24);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce52<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThan => ActionFn(63);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce53<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThan => ActionFn(64);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce54<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThanEquals => ActionFn(65);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce55<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThanEquals => ActionFn(66);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce56<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Devide = "/" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce57<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityExpr = Tier<EqualityOp, ComparisonExpr> => ActionFn(23);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce58<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = Equals => ActionFn(61);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce59<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = NotEquals => ActionFn(62);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce60<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Equals = "==" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce61<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr = OrExpr => ActionFn(19);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce62<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? = Expr => ActionFn(115);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115(input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce63<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? =  => ActionFn(116);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce64<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // FloatLit = r#"[+-]?[0-9]+[.][0-9]*"# => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce65<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, "->", Spaned<Type>, Spaned<Body> => ActionFn(127);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant25(__symbols);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action127(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (6, 36)
    }
    pub(crate) fn __reduce66<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, Spaned<Body> => ActionFn(128);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant25(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action128(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 36)
    }
    pub(crate) fn __reduce67<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThan = ">" => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThanEquals = ">=" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce69<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // IntLit = r#"[0-9]+"# => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce70<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item = Spaned<Function> => ActionFn(6);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce71<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* =  => ActionFn(99);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 41)
    }
    pub(crate) fn __reduce72<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* = Item+ => ActionFn(100);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce73<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item => ActionFn(101);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce74<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item+, Item => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 42)
    }
    pub(crate) fn __reduce75<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThan = "<" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce76<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThanEquals = "<=" => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce77<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = StringLit => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce78<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = FloatLit => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce79<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = IntLit => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce80<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = BoolLit => ActionFn(43);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce81<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalAnd = "&&" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce82<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalOr = "||" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce83<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Minus = "-" => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce84<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Times => ActionFn(69);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce85<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Devide => ActionFn(70);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce86<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicitveExpr = Tier<MultiplicationOp, UnaryExpr> => ActionFn(26);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce87<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Name = r#"[a-zA-Z][a-zA-Z0-9_]*"# => ActionFn(13);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce88<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // NotEquals = "!=" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce89<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // OrExpr = Tier<LogicalOr, AndExpr> => ActionFn(21);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce90<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Plus = "+" => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce91<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = BaseExpr => ActionFn(29);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce92<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "[", Expr, "]" => ActionFn(30);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action30(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce93<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "(", Comma<Expr>, ")" => ActionFn(31);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action31(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce94<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, ".", Name => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 55)
    }
    pub(crate) fn __reduce95<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program =  => ActionFn(162);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action162(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce96<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program = Item+ => ActionFn(163);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action163(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce97<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = Stmt => ActionFn(164);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action164(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce98<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> =  => ActionFn(165);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action165(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce99<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+, Stmt => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action166(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce100<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+ => ActionFn(167);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce101<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Args> = Args => ActionFn(149);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action149(input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce102<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Body> = Body => ActionFn(150);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action150(input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce103<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Function> = Function => ActionFn(151);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action151(input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce104<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Name> = Name => ActionFn(152);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action152(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce105<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Type> = Type => ActionFn(153);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action153(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce106<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = Expr => ActionFn(15);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce107<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "let", Name, "=", Expr => ActionFn(16);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant7(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (4, 63)
    }
    pub(crate) fn __reduce108<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "print", Expr => ActionFn(17);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action17(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce109<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "return", Expr => ActionFn(18);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action18(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce110<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? = Stmt => ActionFn(110);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action110(input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce111<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? =  => ActionFn(111);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 64)
    }
    pub(crate) fn __reduce112<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // StringLit = r#"\"(\\\\.|[^\"\\\\])*\""# => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce113<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = Tier<AdditionOp, MultiplicitveExpr>, AdditionOp, MultiplicitveExpr => ActionFn(79);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action79(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce114<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = MultiplicitveExpr => ActionFn(80);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce115<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = Tier<ComparisonOp, AdditiveExpr>, ComparisonOp, AdditiveExpr => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce116<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = AdditiveExpr => ActionFn(82);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce117<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = Tier<EqualityOp, ComparisonExpr>, EqualityOp, ComparisonExpr => ActionFn(83);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action83(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce118<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = ComparisonExpr => ActionFn(84);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce119<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = Tier<LogicalAnd, EqualityExpr>, LogicalAnd, EqualityExpr => ActionFn(85);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action85(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 69)
    }
    pub(crate) fn __reduce120<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = EqualityExpr => ActionFn(86);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce121<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = Tier<LogicalOr, AndExpr>, LogicalOr, AndExpr => ActionFn(87);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action87(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 70)
    }
    pub(crate) fn __reduce122<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = AndExpr => ActionFn(88);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce123<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = Tier<MultiplicationOp, UnaryExpr>, MultiplicationOp, UnaryExpr => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action77(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce124<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = UnaryExpr => ActionFn(78);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce125<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Times = "*" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce126<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "int" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce127<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "bool" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce128<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "string" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce129<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = PostfixExpr => ActionFn(27);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce130<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = UnaryOp, UnaryExpr => ActionFn(28);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action28(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 74)
    }
    pub(crate) fn __reduce131<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "!" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce132<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "-" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce133<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Expr = Expr => ActionFn(4);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce134<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Function = Function => ActionFn(2);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce135<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Item = Item => ActionFn(1);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce137<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Stmt = Stmt => ActionFn(3);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 80)
    }
}
pub use self::__parse__Program::ProgramParser;

mod __parse__Stmt {
    #![allow(
        non_snake_case,
        non_camel_case_types,
        unused_mut,
        unused_variables,
        unused_imports,
        unused_parens
    )]

    use crate::ast::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate alloc;
    extern crate core;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input> {
        Variant0(&'input str),
        Variant1(Spanned<Type>),
        Variant2(core::option::Option<Spanned<Type>>),
        Variant3(Vec<Stmt<'input>>),
        Variant4(core::option::Option<Vec<Stmt<'input>>>),
        Variant5(Arg<'input>),
        Variant6(alloc::vec::Vec<Arg<'input>>),
        Variant7(Expr<'input>),
        Variant8(alloc::vec::Vec<Expr<'input>>),
        Variant9(Stmt<'input>),
        Variant10(alloc::vec::Vec<Stmt<'input>>),
        Variant11(usize),
        Variant12(BinOp),
        Variant13(core::option::Option<Arg<'input>>),
        Variant14(Vec<Arg<'input>>),
        Variant15(Box<Expr<'input>>),
        Variant16(bool),
        Variant17(Vec<Expr<'input>>),
        Variant18(core::option::Option<Expr<'input>>),
        Variant19(Function<'input>),
        Variant20(Item<'input>),
        Variant21(alloc::vec::Vec<Item<'input>>),
        Variant22(Literal<'input>),
        Variant23(Program<'input>),
        Variant24(Spanned<Vec<Arg<'input>>>),
        Variant25(Spanned<Vec<Stmt<'input>>>),
        Variant26(Spanned<Function<'input>>),
        Variant27(Spanned<&'input str>),
        Variant28(core::option::Option<Stmt<'input>>),
        Variant29(Type),
        Variant30(UnaryOp),
    }
    const __ACTION: &[i16] = &[
        // State 0
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 12, 13, 14, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 1
        0, -26, -26, 0, -26, 0, 62, -26, 63, 0, 0, 0, 0, -26, -26, -26, 0, -26, -26, -26, 0, -26,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, 0, 0, 0, 0, // State 2
        0, -52, -52, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, -52, 68, 69, 0, -52, 70, 71, 0, -52, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, -52, 0, 0, 0, 0, // State 3
        0, 74, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, 0, -58, 0, 0, 0, 75, 0, 0, 0, -58, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, 0, 0, 0, // State 4
        0, 0, 76, 0, -27, 0, 0, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, -27, 0, 0, 0, 0, // State 5
        0, 0, 0, 0, -90, 0, 0, -90, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -90, 77, -90, 0, 0, 0, 0, // State 6
        0, -87, -87, 0, -87, 80, -87, -87, -87, 0, 0, 81, 0, -87, -87, -87, 0, -87, -87, -87, 0,
        -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, -87, -87, 0, 0, 0, 0,
        // State 7
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 8
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, // State 10
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, // State 12
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 13
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 14
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 15
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 12, 13, 14, 0, 55, 15, 16, 0, -99, 56, 57, 58, 59, // State 16
        52, 0, 0, 9, -49, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11,
        0, 0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, // State 18
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 19
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 20
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 21
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 22
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 23
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 24
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, // State 27
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 12, 13, 14, 0, 55, 15, 16, 0, -101, 56, 57, 58, 59, // State 28
        52, 0, 0, 9, -51, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11,
        0, 0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 29
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 30
        52, 0, 0, 9, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 10, 11, 0,
        0, 0, 0, 0, 0, 55, 15, 16, 0, 0, 56, 57, 58, 59, // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, // State 33
        0, -117, -117, 0, -117, 0, 0, -117, 0, 0, 0, 0, 0, -117, -117, -117, 0, -117, -117, -117,
        0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, -117, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, -123, 0, 0, -123, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -123, -123, -123, 0, 0, 0, 0, // State 35
        0, -92, -92, -92, -92, -92, -92, -92, -92, 0, -92, -92, 0, -92, -92, -92, 0, -92, -92, -92,
        -92, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, -92, 0, 0, 0, 0,
        // State 36
        0, -38, -38, -38, -38, -38, -38, -38, -38, 0, -38, -38, 0, -38, -38, -38, 0, -38, -38, -38,
        -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, -38, 0, 0, 0, 0,
        // State 37
        0, -81, -81, -81, -81, -81, -81, -81, -81, 0, -81, -81, 0, -81, -81, -81, 0, -81, -81, -81,
        -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, -81, 0, 0, 0, 0,
        // State 38
        0, -119, -119, 0, -119, 0, 0, -119, 0, 0, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0, 0, -119, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, -119, 0, 0, 0, 0, // State 39
        0, 0, -121, 0, -121, 0, 0, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, -121, -121, 0, 0, 0, 0, // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 0, 0, 0, // State 41
        0, -79, -79, -79, -79, -79, -79, -79, -79, 0, -79, -79, 0, -79, -79, -79, 0, -79, -79, -79,
        -79, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, -79, 0, 0, 0, 0,
        // State 42
        0, -80, -80, -80, -80, -80, -80, -80, -80, 0, -80, -80, 0, -80, -80, -80, 0, -80, -80, -80,
        -80, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, -80, 0, 0, 0, 0,
        // State 43
        0, -40, -40, -40, -40, -40, -40, -40, -40, 0, -40, -40, 0, -40, -40, -40, 0, -40, -40, -40,
        -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, -40, 0, 0, 0, 0,
        // State 44
        0, -115, -115, 0, -115, 0, -115, -115, -115, 0, 0, 0, 0, -115, -115, -115, 0, -115, -115,
        -115, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -115, -115, 0, 0, 0, 0,
        // State 45
        0, -37, -37, -37, -37, -37, -37, -37, -37, 0, -37, -37, 0, -37, -37, -37, 0, -37, -37, -37,
        -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, -37, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -62, 0, -62, 0, 0, 0, 0, // State 47
        0, -130, -130, 17, -130, -130, -130, -130, -130, 0, 18, -130, 0, -130, -130, -130, 0, -130,
        -130, -130, 19, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, -130, -130, 0, 0, 0,
        0, // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 49
        0, -78, -78, -78, -78, -78, -78, -78, -78, 0, -78, -78, 0, -78, -78, -78, 0, -78, -78, -78,
        -78, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, -78, 0, 0, 0, 0,
        // State 50
        0, -125, -125, 0, -125, -125, -125, -125, -125, 0, 0, -125, 0, -125, -125, -125, 0, -125,
        -125, -125, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, -125, 0, 0, 0,
        0, // State 51
        -132, 0, 0, -132, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0,
        -132, -132, 0, 0, 0, 0, 0, 0, -132, -132, -132, 0, 0, -132, -132, -132, -132,
        // State 52
        -133, 0, 0, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0,
        -133, -133, 0, 0, 0, 0, 0, 0, -133, -133, -133, 0, 0, -133, -133, -133, -133,
        // State 53
        0, -43, -43, -43, -43, -43, -43, -43, -43, 0, -43, -43, 0, -43, -43, -43, 0, -43, -43, -43,
        -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, -43, 0, 0, 0, 0,
        // State 54
        0, -42, -42, -42, -42, -42, -42, -42, -42, 0, -42, -42, 0, -42, -42, -42, 0, -42, -42, -42,
        -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, 0, 0, 0, 0,
        // State 55
        0, -113, -113, -113, -113, -113, -113, -113, -113, 0, -113, -113, 0, -113, -113, -113, 0,
        -113, -113, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, -113,
        0, 0, 0, 0, // State 56
        0, -65, -65, -65, -65, -65, -65, -65, -65, 0, -65, -65, 0, -65, -65, -65, 0, -65, -65, -65,
        -65, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, -65, 0, 0, 0, 0,
        // State 57
        0, -70, -70, -70, -70, -70, -70, -70, -70, 0, -70, -70, 0, -70, -70, -70, 0, -70, -70, -70,
        -70, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, -70, 0, 0, 0, 0,
        // State 58
        0, -88, -88, -88, -88, -88, -88, -88, -88, 0, -88, -88, 0, -88, -88, -88, -88, -88, -88,
        -88, -88, -88, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, -88, -88, -88, 0, 0, 0, 0,
        // State 59
        -25, 0, 0, -25, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, -25,
        -25, 0, 0, 0, 0, 0, 0, -25, -25, -25, 0, 0, -25, -25, -25, -25, // State 60
        -24, 0, 0, -24, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24,
        -24, 0, 0, 0, 0, 0, 0, -24, -24, -24, 0, 0, -24, -24, -24, -24, // State 61
        -91, 0, 0, -91, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91,
        -91, 0, 0, 0, 0, 0, 0, -91, -91, -91, 0, 0, -91, -91, -91, -91, // State 62
        -84, 0, 0, -84, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, -84,
        -84, 0, 0, 0, 0, 0, 0, -84, -84, -84, 0, 0, -84, -84, -84, -84, // State 63
        -54, 0, 0, -54, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, -54,
        -54, 0, 0, 0, 0, 0, 0, -54, -54, -54, 0, 0, -54, -54, -54, -54, // State 64
        -56, 0, 0, -56, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, -56,
        -56, 0, 0, 0, 0, 0, 0, -56, -56, -56, 0, 0, -56, -56, -56, -56, // State 65
        -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, -53,
        -53, 0, 0, 0, 0, 0, 0, -53, -53, -53, 0, 0, -53, -53, -53, -53, // State 66
        -55, 0, 0, -55, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, -55,
        -55, 0, 0, 0, 0, 0, 0, -55, -55, -55, 0, 0, -55, -55, -55, -55, // State 67
        -76, 0, 0, -76, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76,
        -76, 0, 0, 0, 0, 0, 0, -76, -76, -76, 0, 0, -76, -76, -76, -76, // State 68
        -77, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, -77,
        -77, 0, 0, 0, 0, 0, 0, -77, -77, -77, 0, 0, -77, -77, -77, -77, // State 69
        -68, 0, 0, -68, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, -68,
        -68, 0, 0, 0, 0, 0, 0, -68, -68, -68, 0, 0, -68, -68, -68, -68, // State 70
        -69, 0, 0, -69, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, -69,
        -69, 0, 0, 0, 0, 0, 0, -69, -69, -69, 0, 0, -69, -69, -69, -69, // State 71
        -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, -59,
        -59, 0, 0, 0, 0, 0, 0, -59, -59, -59, 0, 0, -59, -59, -59, -59, // State 72
        -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, -60,
        -60, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, 0, -60, -60, -60, -60, // State 73
        -89, 0, 0, -89, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89,
        -89, 0, 0, 0, 0, 0, 0, -89, -89, -89, 0, 0, -89, -89, -89, -89, // State 74
        -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, -61,
        -61, 0, 0, 0, 0, 0, 0, -61, -61, -61, 0, 0, -61, -61, -61, -61, // State 75
        -82, 0, 0, -82, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82,
        -82, 0, 0, 0, 0, 0, 0, -82, -82, -82, 0, 0, -82, -82, -82, -82, // State 76
        -83, 0, 0, -83, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, -83,
        -83, 0, 0, 0, 0, 0, 0, -83, -83, -83, 0, 0, -83, -83, -83, -83, // State 77
        -86, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86,
        -86, 0, 0, 0, 0, 0, 0, -86, -86, -86, 0, 0, -86, -86, -86, -86, // State 78
        -85, 0, 0, -85, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85,
        -85, 0, 0, 0, 0, 0, 0, -85, -85, -85, 0, 0, -85, -85, -85, -85, // State 79
        -126, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0,
        -126, -126, 0, 0, 0, 0, 0, 0, -126, -126, -126, 0, 0, -126, -126, -126, -126,
        // State 80
        -57, 0, 0, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, -57,
        -57, 0, 0, 0, 0, 0, 0, -57, -57, -57, 0, 0, -57, -57, -57, -57, // State 81
        0, -131, -131, 0, -131, -131, -131, -131, -131, 0, 0, -131, 0, -131, -131, -131, 0, -131,
        -131, -131, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -131, -131, 0, 0, 0,
        0, // State 82
        0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, // State 90
        0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 91
        0, 0, 0, 0, -48, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 92
        0, -95, -95, -95, -95, -95, -95, -95, -95, 0, -95, -95, 0, -95, -95, -95, 0, -95, -95, -95,
        -95, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, -95, -95, 0, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 94
        0, -114, -114, 0, -114, 0, -114, -114, -114, 0, 0, 0, 0, -114, -114, -114, 0, -114, -114,
        -114, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, -114, -114, 0, 0, 0, 0,
        // State 95
        0, -116, -116, 0, -116, 0, 0, -116, 0, 0, 0, 0, 0, -116, -116, -116, 0, -116, -116, -116, 0,
        -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, -116, 0, 0, 0, 0,
        // State 96
        0, -118, -118, 0, -118, 0, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0, 0, -118, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, -118, 0, 0, 0, 0, // State 97
        0, 0, -120, 0, -120, 0, 0, -120, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, -120, -120, 0, 0, 0, 0, // State 98
        0, 0, 0, 0, -122, 0, 0, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, -122, 0, 0, 0, 0, // State 99
        0, -124, -124, 0, -124, -124, -124, -124, -124, 0, 0, -124, 0, -124, -124, -124, 0, -124,
        -124, -124, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, -124, -124, 0, 0, 0,
        0, // State 100
        0, -39, -39, -39, -39, -39, -39, -39, -39, 0, -39, -39, 0, -39, -39, -39, 0, -39, -39, -39,
        -39, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, -39, -39, 0, 0, 0, 0,
        // State 101
        0, -34, -34, -34, -34, -34, -34, -34, -34, 0, -34, -34, 0, -34, -34, -34, 0, -34, -34, -34,
        -34, -34, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, -34, -34, 0, 0, 0, 0,
        // State 102
        0, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, -36, 0, -36, -36, -36, 0, -36, -36, -36,
        -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36, -36, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, // State 104
        0, -41, -41, -41, -41, -41, -41, -41, -41, 0, -41, -41, 0, -41, -41, -41, 0, -41, -41, -41,
        -41, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41, -41, 0, 0, 0, 0,
        // State 105
        -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20,
        -20, 0, 0, -20, -20, -20, 0, -20, -20, -20, 0, -20, -20, -20, -20, -20,
        // State 106
        0, 0, 0, 0, -50, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // State 107
        0, -94, -94, -94, -94, -94, -94, -94, -94, 0, -94, -94, 0, -94, -94, -94, 0, -94, -94, -94,
        -94, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, -94, 0, 0, 0, 0,
        // State 108
        -15, 0, 0, -15, -15, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15,
        -15, 0, 0, 0, 0, 0, 0, -15, -15, -15, 0, 0, -15, -15, -15, -15, // State 109
        0, -93, -93, -93, -93, -93, -93, -93, -93, 0, -93, -93, 0, -93, -93, -93, 0, -93, -93, -93,
        -93, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, -93, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, // State 111
        -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21,
        -21, 0, 0, -21, -21, -21, 0, -21, -21, -21, 0, -21, -21, -21, -21, -21,
        // State 112
        -16, 0, 0, -16, -16, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, -16,
        -16, 0, 0, 0, 0, 0, 0, -16, -16, -16, 0, 0, -16, -16, -16, -16, // State 113
        0, -35, -35, -35, -35, -35, -35, -35, -35, 0, -35, -35, 0, -35, -35, -35, 0, -35, -35, -35,
        -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -35, 0, 0, 0, 0,
        // State 114
        0, -33, -33, -33, -33, -33, -33, -33, -33, 0, -33, -33, 0, -33, -33, -33, 0, -33, -33, -33,
        -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -33, -33, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 43 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,    // State 1
        -26,  // State 2
        -52,  // State 3
        -58,  // State 4
        -27,  // State 5
        -90,  // State 6
        -87,  // State 7
        0,    // State 8
        0,    // State 9
        0,    // State 10
        0,    // State 11
        0,    // State 12
        0,    // State 13
        0,    // State 14
        0,    // State 15
        0,    // State 16
        0,    // State 17
        0,    // State 18
        0,    // State 19
        0,    // State 20
        0,    // State 21
        0,    // State 22
        0,    // State 23
        0,    // State 24
        0,    // State 25
        0,    // State 26
        0,    // State 27
        0,    // State 28
        0,    // State 29
        0,    // State 30
        0,    // State 31
        0,    // State 32
        0,    // State 33
        -117, // State 34
        -123, // State 35
        -92,  // State 36
        -38,  // State 37
        -81,  // State 38
        -119, // State 39
        -121, // State 40
        -107, // State 41
        -79,  // State 42
        -80,  // State 43
        -40,  // State 44
        -115, // State 45
        -37,  // State 46
        -62,  // State 47
        -130, // State 48
        -138, // State 49
        -78,  // State 50
        -125, // State 51
        0,    // State 52
        0,    // State 53
        -43,  // State 54
        -42,  // State 55
        -113, // State 56
        -65,  // State 57
        -70,  // State 58
        -88,  // State 59
        0,    // State 60
        0,    // State 61
        0,    // State 62
        0,    // State 63
        0,    // State 64
        0,    // State 65
        0,    // State 66
        0,    // State 67
        0,    // State 68
        0,    // State 69
        0,    // State 70
        0,    // State 71
        0,    // State 72
        0,    // State 73
        0,    // State 74
        0,    // State 75
        0,    // State 76
        0,    // State 77
        0,    // State 78
        0,    // State 79
        0,    // State 80
        0,    // State 81
        -131, // State 82
        0,    // State 83
        0,    // State 84
        0,    // State 85
        0,    // State 86
        -109, // State 87
        -110, // State 88
        0,    // State 89
        0,    // State 90
        0,    // State 91
        0,    // State 92
        -95,  // State 93
        0,    // State 94
        -114, // State 95
        -116, // State 96
        -118, // State 97
        -120, // State 98
        -122, // State 99
        -124, // State 100
        -39,  // State 101
        -34,  // State 102
        -36,  // State 103
        0,    // State 104
        -41,  // State 105
        0,    // State 106
        0,    // State 107
        -94,  // State 108
        0,    // State 109
        -93,  // State 110
        -108, // State 111
        0,    // State 112
        0,    // State 113
        -35,  // State 114
        -33,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            9 => 28,
            12 => 27,
            15 => 19,
            16 => match state {
                20 => 95,
                _ => 33,
            },
            17 => match state {
                23 => 98,
                _ => 34,
            },
            21 => match state {
                14 => 26,
                29 => 31,
                _ => 25,
            },
            22 => 35,
            23 => match state {
                25 => 101,
                26 => 102,
                31 => 113,
                32 => 114,
                _ => 36,
            },
            24 => 37,
            26 => 90,
            27 => match state {
                21 => 96,
                _ => 38,
            },
            28 => 20,
            29 => 77,
            30 => match state {
                22 => 97,
                _ => 39,
            },
            31 => 21,
            32 => 71,
            33 => match state {
                8 => 82,
                10 | 14 | 29 => 84,
                12 => 86,
                13 => 87,
                16 => 91,
                18 => 93,
                28 => 106,
                30 => 110,
                _ => 40,
            },
            35 => 41,
            37 => 63,
            38 => 64,
            39 => 42,
            43 => 65,
            44 => 66,
            45 => 43,
            46 => 22,
            47 => 23,
            48 => 59,
            49 => 24,
            50 => match state {
                19 => 94,
                _ => 44,
            },
            51 => match state {
                9 => 83,
                11 => 85,
                17 => 92,
                _ => 45,
            },
            52 => 72,
            53 => 46,
            54 => 60,
            55 => 47,
            57 => 88,
            63 => match state {
                15 => 89,
                27 => 103,
                _ => 48,
            },
            65 => 49,
            66 => 1,
            67 => 2,
            68 => 3,
            69 => 4,
            70 => 5,
            71 => 6,
            72 => 78,
            74 => match state {
                7 => 81,
                24 => 99,
                _ => 50,
            },
            75 => 7,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""[""###,
            r###""]""###,
            r###""bool""###,
            r###""else""###,
            r###""false""###,
            r###""fn""###,
            r###""for""###,
            r###""if""###,
            r###""in""###,
            r###""int""###,
            r###""let""###,
            r###""print""###,
            r###""return""###,
            r###""string""###,
            r###""true""###,
            r###""while""###,
            r###""{""###,
            r###""||""###,
            r###""}""###,
            r###"r#"\"(\\\\.|[^\"\\\\])*\""#"###,
            r###"r#"[+-]?[0-9]+[.][0-9]*"#"###,
            r###"r#"[0-9]+"#"###,
            r###"r#"[a-zA-Z][a-zA-Z0-9_]*"#"###,
        ];
        __TERMINAL
            .iter()
            .enumerate()
            .filter_map(|(index, terminal)| {
                let next_state = __action(__state, index);
                if next_state == 0 {
                    None
                } else {
                    Some(alloc::string::ToString::to_string(terminal))
                }
            })
            .collect()
    }
    pub(crate) struct __StateMachine<'input> {
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input> {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Stmt<'input>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
            Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
            0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 43 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<'input>(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize> {
        match *__token {
            Token(4, _) if true => Some(0),
            Token(5, _) if true => Some(1),
            Token(6, _) if true => Some(2),
            Token(7, _) if true => Some(3),
            Token(8, _) if true => Some(4),
            Token(9, _) if true => Some(5),
            Token(10, _) if true => Some(6),
            Token(11, _) if true => Some(7),
            Token(12, _) if true => Some(8),
            Token(13, _) if true => Some(9),
            Token(14, _) if true => Some(10),
            Token(15, _) if true => Some(11),
            Token(16, _) if true => Some(12),
            Token(17, _) if true => Some(13),
            Token(18, _) if true => Some(14),
            Token(19, _) if true => Some(15),
            Token(20, _) if true => Some(16),
            Token(21, _) if true => Some(17),
            Token(22, _) if true => Some(18),
            Token(23, _) if true => Some(19),
            Token(24, _) if true => Some(20),
            Token(25, _) if true => Some(21),
            Token(26, _) if true => Some(22),
            Token(27, _) if true => Some(23),
            Token(28, _) if true => Some(24),
            Token(29, _) if true => Some(25),
            Token(30, _) if true => Some(26),
            Token(31, _) if true => Some(27),
            Token(32, _) if true => Some(28),
            Token(33, _) if true => Some(29),
            Token(34, _) if true => Some(30),
            Token(35, _) if true => Some(31),
            Token(36, _) if true => Some(32),
            Token(37, _) if true => Some(33),
            Token(38, _) if true => Some(34),
            Token(39, _) if true => Some(35),
            Token(40, _) if true => Some(36),
            Token(41, _) if true => Some(37),
            Token(42, _) if true => Some(38),
            Token(0, _) if true => Some(39),
            Token(1, _) if true => Some(40),
            Token(2, _) if true => Some(41),
            Token(3, _) if true => Some(42),
            _ => None,
        }
    }
    fn __token_to_symbol<'input>(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input> {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18
            | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34
            | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 => match __token {
                Token(4, __tok0)
                | Token(5, __tok0)
                | Token(6, __tok0)
                | Token(7, __tok0)
                | Token(8, __tok0)
                | Token(9, __tok0)
                | Token(10, __tok0)
                | Token(11, __tok0)
                | Token(12, __tok0)
                | Token(13, __tok0)
                | Token(14, __tok0)
                | Token(15, __tok0)
                | Token(16, __tok0)
                | Token(17, __tok0)
                | Token(18, __tok0)
                | Token(19, __tok0)
                | Token(20, __tok0)
                | Token(21, __tok0)
                | Token(22, __tok0)
                | Token(23, __tok0)
                | Token(24, __tok0)
                | Token(25, __tok0)
                | Token(26, __tok0)
                | Token(27, __tok0)
                | Token(28, __tok0)
                | Token(29, __tok0)
                | Token(30, __tok0)
                | Token(31, __tok0)
                | Token(32, __tok0)
                | Token(33, __tok0)
                | Token(34, __tok0)
                | Token(35, __tok0)
                | Token(36, __tok0)
                | Token(37, __tok0)
                | Token(38, __tok0)
                | Token(39, __tok0)
                | Token(40, __tok0)
                | Token(41, __tok0)
                | Token(42, __tok0)
                | Token(0, __tok0)
                | Token(1, __tok0)
                | Token(2, __tok0)
                | Token(3, __tok0)
                    if true =>
                {
                    __Symbol::Variant0(__tok0)
                }
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct StmtParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl StmtParser {
        pub fn new() -> StmtParser {
            let __builder = super::__intern_token::new_builder();
            StmtParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<'input>(
            &self,
            input: &'input str,
        ) -> Result<Stmt<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<'input>(
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Stmt<'input>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => __reduce0(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            1 => __reduce1(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            2 => __reduce2(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            3 => __reduce3(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            4 => __reduce4(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            5 => __reduce5(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            6 => __reduce6(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            7 => __reduce7(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            8 => __reduce8(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            9 => __reduce9(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            10 => __reduce10(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            11 => __reduce11(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            12 => __reduce12(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            13 => __reduce13(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            14 => __reduce14(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            15 => __reduce15(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            16 => __reduce16(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            17 => __reduce17(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            18 => __reduce18(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            19 => __reduce19(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            20 => __reduce20(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            21 => __reduce21(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            22 => __reduce22(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            23 => __reduce23(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            24 => __reduce24(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            25 => __reduce25(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            26 => __reduce26(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            27 => __reduce27(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            28 => __reduce28(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            29 => __reduce29(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            30 => __reduce30(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            31 => __reduce31(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            32 => __reduce32(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            33 => __reduce33(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            34 => __reduce34(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            35 => __reduce35(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            36 => __reduce36(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            37 => __reduce37(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            38 => __reduce38(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            39 => __reduce39(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            40 => __reduce40(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            41 => __reduce41(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            42 => __reduce42(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            43 => __reduce43(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            44 => __reduce44(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            45 => __reduce45(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            46 => __reduce46(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            47 => __reduce47(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            48 => __reduce48(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            49 => __reduce49(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            50 => __reduce50(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            51 => __reduce51(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            52 => __reduce52(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            53 => __reduce53(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            54 => __reduce54(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            55 => __reduce55(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            56 => __reduce56(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            57 => __reduce57(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            58 => __reduce58(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            59 => __reduce59(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            60 => __reduce60(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            61 => __reduce61(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            62 => __reduce62(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            63 => __reduce63(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            64 => __reduce64(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            65 => __reduce65(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            66 => __reduce66(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            67 => __reduce67(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            68 => __reduce68(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            69 => __reduce69(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            70 => __reduce70(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            71 => __reduce71(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            72 => __reduce72(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            73 => __reduce73(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            74 => __reduce74(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            75 => __reduce75(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            76 => __reduce76(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            77 => __reduce77(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            78 => __reduce78(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            79 => __reduce79(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            80 => __reduce80(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            81 => __reduce81(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            82 => __reduce82(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            83 => __reduce83(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            84 => __reduce84(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            85 => __reduce85(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            86 => __reduce86(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            87 => __reduce87(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            88 => __reduce88(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            89 => __reduce89(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            90 => __reduce90(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            91 => __reduce91(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            92 => __reduce92(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            93 => __reduce93(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            94 => __reduce94(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            95 => __reduce95(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            96 => __reduce96(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            97 => __reduce97(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            98 => __reduce98(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            99 => __reduce99(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            100 => __reduce100(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            101 => __reduce101(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            102 => __reduce102(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            103 => __reduce103(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            104 => __reduce104(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            105 => __reduce105(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            106 => __reduce106(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            107 => __reduce107(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            108 => __reduce108(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            109 => __reduce109(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            110 => __reduce110(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            111 => __reduce111(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            112 => __reduce112(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            113 => __reduce113(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            114 => __reduce114(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            115 => __reduce115(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            116 => __reduce116(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            117 => __reduce117(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            118 => __reduce118(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            119 => __reduce119(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            120 => __reduce120(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            121 => __reduce121(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            122 => __reduce122(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            123 => __reduce123(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            124 => __reduce124(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            125 => __reduce125(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            126 => __reduce126(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            127 => __reduce127(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            128 => __reduce128(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            129 => __reduce129(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            130 => __reduce130(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            131 => __reduce131(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            132 => __reduce132(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            133 => __reduce133(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            134 => __reduce134(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            135 => __reduce135(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            136 => __reduce136(
                input,
                __lookahead_start,
                __symbols,
                core::marker::PhantomData::<(&())>,
            ),
            137 => {
                // __Stmt = Stmt => ActionFn(3);
                let __sym0 = __pop_Variant9(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action3(input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action),
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant5<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Arg<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant12<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, BinOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant15<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Box<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant7<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Expr<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant19<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Function<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant20<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Item<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant22<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Literal<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant23<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Program<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant26<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Function<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant1<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Type>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant24<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Arg<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant25<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant27<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Spanned<&'input str>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant9<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Stmt<'input>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant29<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Type, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant30<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, UnaryOp, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant14<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant17<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant3<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant6<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant8<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant21<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Item<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant10<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, alloc::vec::Vec<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant16<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, bool, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant13<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Arg<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant18<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Expr<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant2<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Spanned<Type>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant28<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Stmt<'input>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant4<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, core::option::Option<Vec<Stmt<'input>>>, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant11<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, usize, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    fn __pop_Variant0<'input>(
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
    ) -> (usize, &'input str, usize) {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch(),
        }
    }
    pub(crate) fn __reduce0<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>) = "->", Spaned<Type> => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? = "->", Spaned<Type> => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("->" <Spaned<Type>>)? =  => ActionFn(93);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action93(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>) = "else", Body => ActionFn(75);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action75(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? = "else", Body => ActionFn(129);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action129(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce5<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ("else" <Body>)? =  => ActionFn(74);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action74(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",") = Arg, "," => ActionFn(109);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action109(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* =  => ActionFn(107);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action107(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")* = (<Arg> ",")+ => ActionFn(108);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = Arg, "," => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce10<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Arg> ",")+ = (<Arg> ",")+, Arg, "," => ActionFn(133);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action133(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 6)
    }
    pub(crate) fn __reduce11<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",") = Expr, "," => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action119(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* =  => ActionFn(117);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action117(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce13<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")* = (<Expr> ",")+ => ActionFn(118);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = Expr, "," => ActionFn(136);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action136(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce15<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 9)
    }
    pub(crate) fn __reduce16<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";") = Stmt, ";" => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* =  => ActionFn(112);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action112(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce18<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")* = (<Stmt> ";")+ => ActionFn(113);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = Stmt, ";" => ActionFn(140);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action140(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce20<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // (<Stmt> ";")+ = (<Stmt> ";")+, Stmt, ";" => ActionFn(141);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action141(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce21<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @L =  => ActionFn(104);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action104(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce22<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // @R =  => ActionFn(103);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action103(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 14)
    }
    pub(crate) fn __reduce23<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Plus => ActionFn(67);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce24<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditionOp = Minus => ActionFn(68);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce25<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AdditiveExpr = Tier<AdditionOp, MultiplicitveExpr> => ActionFn(25);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce26<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // AndExpr = Tier<LogicalAnd, EqualityExpr> => ActionFn(22);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce27<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg = Name, ":", Type => ActionFn(9);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action9(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce28<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? = Arg => ActionFn(105);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105(input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce29<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Arg? =  => ActionFn(106);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action106(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce30<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Args = "(", Comma<Arg>, ")" => ActionFn(8);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action8(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce31<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BExpr = Expr => ActionFn(20);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20(input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce32<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body, "else", Body => ActionFn(130);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action130(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce33<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "if", BExpr, Body => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce34<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "for", Name, "in", BExpr, Body => ActionFn(34);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant3(__symbols);
        let __sym3 = __pop_Variant15(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action34(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce35<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "while", BExpr, Body => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action35(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce36<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Name => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce37<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Body => ActionFn(37);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce38<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = "(", Expr, ")" => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action38(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce39<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BaseExpr = Literal => ActionFn(39);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Body = "{", Semi<Stmt>, "}" => ActionFn(14);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action14(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce41<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "true" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // BoolLit = "false" => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce43<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = Arg => ActionFn(154);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action154(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce44<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> =  => ActionFn(155);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action155(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce45<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+, Arg => ActionFn(156);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action156(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce46<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Arg> = (<Arg> ",")+ => ActionFn(157);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce47<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = Expr => ActionFn(158);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action158(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce48<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> =  => ActionFn(159);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action159(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce49<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+, Expr => ActionFn(160);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action160(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce50<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Comma<Expr> = (<Expr> ",")+ => ActionFn(161);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action161(input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce51<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonExpr = Tier<ComparisonOp, AdditiveExpr> => ActionFn(24);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce52<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThan => ActionFn(63);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce53<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThan => ActionFn(64);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce54<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = LessThanEquals => ActionFn(65);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce55<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // ComparisonOp = GreaterThanEquals => ActionFn(66);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce56<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Devide = "/" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce57<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityExpr = Tier<EqualityOp, ComparisonExpr> => ActionFn(23);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce58<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = Equals => ActionFn(61);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce59<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // EqualityOp = NotEquals => ActionFn(62);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce60<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Equals = "==" => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce61<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr = OrExpr => ActionFn(19);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce62<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? = Expr => ActionFn(115);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115(input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce63<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Expr? =  => ActionFn(116);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce64<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // FloatLit = r#"[+-]?[0-9]+[.][0-9]*"# => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce65<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, "->", Spaned<Type>, Spaned<Body> => ActionFn(127);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant25(__symbols);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action127(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (6, 36)
    }
    pub(crate) fn __reduce66<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Function = "fn", Spaned<Name>, Spaned<Args>, Spaned<Body> => ActionFn(128);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant25(__symbols);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action128(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 36)
    }
    pub(crate) fn __reduce67<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThan = ">" => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce68<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // GreaterThanEquals = ">=" => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce69<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // IntLit = r#"[0-9]+"# => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce70<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item = Spaned<Function> => ActionFn(6);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce71<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* =  => ActionFn(99);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 41)
    }
    pub(crate) fn __reduce72<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item* = Item+ => ActionFn(100);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce73<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item => ActionFn(101);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce74<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Item+ = Item+, Item => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 42)
    }
    pub(crate) fn __reduce75<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThan = "<" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce76<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LessThanEquals = "<=" => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce77<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = StringLit => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce78<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = FloatLit => ActionFn(41);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce79<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = IntLit => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce80<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Literal = BoolLit => ActionFn(43);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce81<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalAnd = "&&" => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce82<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // LogicalOr = "||" => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce83<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Minus = "-" => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce84<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Times => ActionFn(69);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce85<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicationOp = Devide => ActionFn(70);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce86<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // MultiplicitveExpr = Tier<MultiplicationOp, UnaryExpr> => ActionFn(26);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce87<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Name = r#"[a-zA-Z][a-zA-Z0-9_]*"# => ActionFn(13);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce88<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // NotEquals = "!=" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce89<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // OrExpr = Tier<LogicalOr, AndExpr> => ActionFn(21);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce90<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Plus = "+" => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce91<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = BaseExpr => ActionFn(29);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce92<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "[", Expr, "]" => ActionFn(30);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action30(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce93<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, "(", Comma<Expr>, ")" => ActionFn(31);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action31(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 55)
    }
    pub(crate) fn __reduce94<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // PostfixExpr = PostfixExpr, ".", Name => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 55)
    }
    pub(crate) fn __reduce95<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program =  => ActionFn(162);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action162(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 56)
    }
    pub(crate) fn __reduce96<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Program = Item+ => ActionFn(163);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action163(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce97<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = Stmt => ActionFn(164);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action164(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce98<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> =  => ActionFn(165);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action165(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce99<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+, Stmt => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action166(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 57)
    }
    pub(crate) fn __reduce100<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Semi<Stmt> = (<Stmt> ";")+ => ActionFn(167);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167(input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce101<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Args> = Args => ActionFn(149);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action149(input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce102<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Body> = Body => ActionFn(150);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action150(input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce103<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Function> = Function => ActionFn(151);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action151(input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce104<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Name> = Name => ActionFn(152);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action152(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce105<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Spaned<Type> = Type => ActionFn(153);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action153(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce106<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = Expr => ActionFn(15);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce107<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "let", Name, "=", Expr => ActionFn(16);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant7(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (4, 63)
    }
    pub(crate) fn __reduce108<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "print", Expr => ActionFn(17);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action17(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce109<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt = "return", Expr => ActionFn(18);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action18(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce110<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? = Stmt => ActionFn(110);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action110(input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce111<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Stmt? =  => ActionFn(111);
        let __start = __lookahead_start
            .cloned()
            .or_else(|| __symbols.last().map(|s| s.2.clone()))
            .unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action111(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 64)
    }
    pub(crate) fn __reduce112<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // StringLit = r#"\"(\\\\.|[^\"\\\\])*\""# => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44(input, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce113<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = Tier<AdditionOp, MultiplicitveExpr>, AdditionOp, MultiplicitveExpr => ActionFn(79);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action79(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce114<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<AdditionOp, MultiplicitveExpr> = MultiplicitveExpr => ActionFn(80);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce115<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = Tier<ComparisonOp, AdditiveExpr>, ComparisonOp, AdditiveExpr => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce116<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<ComparisonOp, AdditiveExpr> = AdditiveExpr => ActionFn(82);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce117<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = Tier<EqualityOp, ComparisonExpr>, EqualityOp, ComparisonExpr => ActionFn(83);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action83(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce118<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<EqualityOp, ComparisonExpr> = ComparisonExpr => ActionFn(84);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce119<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = Tier<LogicalAnd, EqualityExpr>, LogicalAnd, EqualityExpr => ActionFn(85);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action85(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 69)
    }
    pub(crate) fn __reduce120<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalAnd, EqualityExpr> = EqualityExpr => ActionFn(86);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce121<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = Tier<LogicalOr, AndExpr>, LogicalOr, AndExpr => ActionFn(87);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action87(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 70)
    }
    pub(crate) fn __reduce122<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<LogicalOr, AndExpr> = AndExpr => ActionFn(88);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce123<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = Tier<MultiplicationOp, UnaryExpr>, MultiplicationOp, UnaryExpr => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action77(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce124<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Tier<MultiplicationOp, UnaryExpr> = UnaryExpr => ActionFn(78);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 71)
    }
    pub(crate) fn __reduce125<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Times = "*" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59(input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce126<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "int" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce127<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "bool" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce128<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // Type = "string" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12(input, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce129<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = PostfixExpr => ActionFn(27);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce130<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryExpr = UnaryOp, UnaryExpr => ActionFn(28);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action28(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 74)
    }
    pub(crate) fn __reduce131<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "!" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce132<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // UnaryOp = "-" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72(input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 75)
    }
    pub(crate) fn __reduce133<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Expr = Expr => ActionFn(4);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4(input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce134<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Function = Function => ActionFn(2);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 77)
    }
    pub(crate) fn __reduce135<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Item = Item => ActionFn(1);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 78)
    }
    pub(crate) fn __reduce136<'input>(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize, __Symbol<'input>, usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize) {
        // __Program = Program => ActionFn(0);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 79)
    }
}
pub use self::__parse__Stmt::StmtParser;

mod __intern_token {
    #![allow(unused_imports)]
    use crate::ast::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate alloc;
    extern crate core;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            (
                "^(\"(\\\\[\u{0}-\t\u{b}-\u{10ffff}]|[\u{0}-!\\#-\\[\\]-\u{10ffff}])*\")",
                false,
            ),
            ("^([\\+\\-]?[0-9]+[\\.][0-9]*)", false),
            ("^([0-9]+)", false),
            ("^([A-Za-z][0-9A-Z_a-z]*)", false),
            ("^(!)", false),
            ("^(!=)", false),
            ("^(\\&\\&)", false),
            ("^(\\()", false),
            ("^(\\))", false),
            ("^(\\*)", false),
            ("^(\\+)", false),
            ("^(,)", false),
            ("^(\\-)", false),
            ("^(\\->)", false),
            ("^(\\.)", false),
            ("^(/)", false),
            ("^(:)", false),
            ("^(;)", false),
            ("^(<)", false),
            ("^(<=)", false),
            ("^(=)", false),
            ("^(==)", false),
            ("^(>)", false),
            ("^(>=)", false),
            ("^(\\[)", false),
            ("^(\\])", false),
            ("^(bool)", false),
            ("^(else)", false),
            ("^(false)", false),
            ("^(fn)", false),
            ("^(for)", false),
            ("^(if)", false),
            ("^(in)", false),
            ("^(int)", false),
            ("^(let)", false),
            ("^(print)", false),
            ("^(return)", false),
            ("^(string)", false),
            ("^(true)", false),
            ("^(while)", false),
            ("^(\\{)", false),
            ("^(\\|\\|)", false),
            ("^(\\})", false),
            (r"^(\s*)", true),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub(crate) use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
fn __action0<'input>(
    input: &'input str,
    (_, __0, _): (usize, Program<'input>, usize),
) -> Program<'input> {
    __0
}

#[allow(unused_variables)]
fn __action1<'input>(
    input: &'input str,
    (_, __0, _): (usize, Item<'input>, usize),
) -> Item<'input> {
    __0
}

#[allow(unused_variables)]
fn __action2<'input>(
    input: &'input str,
    (_, __0, _): (usize, Function<'input>, usize),
) -> Function<'input> {
    __0
}

#[allow(unused_variables)]
fn __action3<'input>(
    input: &'input str,
    (_, __0, _): (usize, Stmt<'input>, usize),
) -> Stmt<'input> {
    __0
}

#[allow(unused_variables)]
fn __action4<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action5<'input>(
    input: &'input str,
    (_, __0, _): (usize, alloc::vec::Vec<Item<'input>>, usize),
) -> Program<'input> {
    __0
}

#[allow(unused_variables)]
fn __action6<'input>(
    input: &'input str,
    (_, __0, _): (usize, Spanned<Function<'input>>, usize),
) -> Item<'input> {
    Item::Function(__0)
}

#[allow(unused_variables)]
fn __action7<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, name, _): (usize, Spanned<&'input str>, usize),
    (_, args, _): (usize, Spanned<Vec<Arg<'input>>>, usize),
    (_, ret, _): (usize, core::option::Option<Spanned<Type>>, usize),
    (_, body, _): (usize, Spanned<Vec<Stmt<'input>>>, usize),
) -> Function<'input> {
    Function {
        name: name,
        args: args,
        ret: ret,
        body: body,
    }
}

#[allow(unused_variables)]
fn __action8<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<Arg<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Vec<Arg<'input>> {
    __0
}

#[allow(unused_variables)]
fn __action9<'input>(
    input: &'input str,
    (_, name, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ty, _): (usize, Type, usize),
) -> Arg<'input> {
    Arg { name: name, ty: ty }
}

#[allow(unused_variables)]
fn __action10<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Type {
    Type::Int
}

#[allow(unused_variables)]
fn __action11<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Type {
    Type::Bool
}

#[allow(unused_variables)]
fn __action12<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Type {
    Type::String
}

#[allow(unused_variables)]
fn __action13<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> &'input str {
    __0
}

#[allow(unused_variables)]
fn __action14<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<Stmt<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Vec<Stmt<'input>> {
    __0
}

#[allow(unused_variables)]
fn __action15<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Stmt<'input> {
    Stmt::Expr(__0)
}

#[allow(unused_variables)]
fn __action16<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Expr<'input>, usize),
) -> Stmt<'input> {
    Stmt::Let(__0, __1)
}

#[allow(unused_variables)]
fn __action17<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Stmt<'input> {
    Stmt::Print(__0)
}

#[allow(unused_variables)]
fn __action18<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Stmt<'input> {
    Stmt::Return(__0)
}

#[allow(unused_variables)]
fn __action19<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action20<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Box<Expr<'input>> {
    Box::new(__0)
}

#[allow(unused_variables)]
fn __action21<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action22<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action23<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action24<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action25<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action26<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action27<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action28<'input>(
    input: &'input str,
    (_, o, _): (usize, UnaryOp, usize),
    (_, e, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    Expr::UnaryOp(o, Box::new(e))
}

#[allow(unused_variables)]
fn __action29<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action30<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, Expr<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Expr<'input> {
    Expr::ArrayAccess(Box::new(l), Box::new(r))
}

#[allow(unused_variables)]
fn __action31<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, Vec<Expr<'input>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Expr<'input> {
    Expr::Call(Box::new(l), r)
}

#[allow(unused_variables)]
fn __action32<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, r, _): (usize, &'input str, usize),
) -> Expr<'input> {
    Expr::FieldAccess(Box::new(l), r)
}

#[allow(unused_variables)]
fn __action33<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, __1, _): (usize, Vec<Stmt<'input>>, usize),
    (_, __2, _): (usize, core::option::Option<Vec<Stmt<'input>>>, usize),
) -> Expr<'input> {
    Expr::If(__0, __1, __2)
}

#[allow(unused_variables)]
fn __action34<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Box<Expr<'input>>, usize),
    (_, __2, _): (usize, Vec<Stmt<'input>>, usize),
) -> Expr<'input> {
    Expr::For(__0, __1, __2)
}

#[allow(unused_variables)]
fn __action35<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expr<'input>>, usize),
    (_, __1, _): (usize, Vec<Stmt<'input>>, usize),
) -> Expr<'input> {
    Expr::While(__0, __1)
}

#[allow(unused_variables)]
fn __action36<'input>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Expr<'input> {
    Expr::Var(__0)
}

#[allow(unused_variables)]
fn __action37<'input>(
    input: &'input str,
    (_, __0, _): (usize, Vec<Stmt<'input>>, usize),
) -> Expr<'input> {
    Expr::Block(__0)
}

#[allow(unused_variables)]
fn __action38<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Expr<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action39<'input>(
    input: &'input str,
    (_, __0, _): (usize, Literal<'input>, usize),
) -> Expr<'input> {
    Expr::Literal(__0)
}

#[allow(unused_variables)]
fn __action40<'input>(
    input: &'input str,
    (_, s, _): (usize, &'input str, usize),
) -> Literal<'input> {
    Literal::String(&s[1..s.len() - 1])
}

#[allow(unused_variables)]
fn __action41<'input>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal<'input> {
    Literal::Float(__0.parse().unwrap())
}

#[allow(unused_variables)]
fn __action42<'input>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Literal<'input> {
    Literal::Integer(__0.parse().unwrap())
}

#[allow(unused_variables)]
fn __action43<'input>(input: &'input str, (_, __0, _): (usize, bool, usize)) -> Literal<'input> {
    Literal::Bool(__0)
}

#[allow(unused_variables)]
fn __action44<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> &'input str {
    __0
}

#[allow(unused_variables)]
fn __action45<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> &'input str {
    __0
}

#[allow(unused_variables)]
fn __action46<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> &'input str {
    __0
}

#[allow(unused_variables)]
fn __action47<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> bool {
    true
}

#[allow(unused_variables)]
fn __action48<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> bool {
    false
}

#[allow(unused_variables)]
fn __action49<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::LogicalOr
}

#[allow(unused_variables)]
fn __action50<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::LogicalAnd
}

#[allow(unused_variables)]
fn __action51<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::Equals
}

#[allow(unused_variables)]
fn __action52<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::NotEquals
}

#[allow(unused_variables)]
fn __action53<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::LessThan
}

#[allow(unused_variables)]
fn __action54<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::GreaterThan
}

#[allow(unused_variables)]
fn __action55<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::LessThanEquals
}

#[allow(unused_variables)]
fn __action56<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::GreaterThanEquals
}

#[allow(unused_variables)]
fn __action57<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::Plus
}

#[allow(unused_variables)]
fn __action58<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::Minus
}

#[allow(unused_variables)]
fn __action59<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::Times
}

#[allow(unused_variables)]
fn __action60<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> BinOp {
    BinOp::Devide
}

#[allow(unused_variables)]
fn __action61<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action62<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action63<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action64<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action65<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action66<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action67<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action68<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action69<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action70<'input>(input: &'input str, (_, __0, _): (usize, BinOp, usize)) -> BinOp {
    __0
}

#[allow(unused_variables)]
fn __action71<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> UnaryOp {
    UnaryOp::Not
}

#[allow(unused_variables)]
fn __action72<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> UnaryOp {
    UnaryOp::Minus
}

#[allow(unused_variables)]
fn __action73<'input>(
    input: &'input str,
    (_, __0, _): (usize, Vec<Stmt<'input>>, usize),
) -> core::option::Option<Vec<Stmt<'input>>> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action74<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Vec<Stmt<'input>>> {
    None
}

#[allow(unused_variables)]
fn __action75<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<Stmt<'input>>, usize),
) -> Vec<Stmt<'input>> {
    __0
}

#[allow(unused_variables)]
fn __action76<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Expr<'input>>, usize),
    (_, e, _): (usize, core::option::Option<Expr<'input>>, usize),
) -> Vec<Expr<'input>> {
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action77<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, o, _): (usize, BinOp, usize),
    (_, r, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    Expr::BinOp(Box::new(l), o, Box::new(r))
}

#[allow(unused_variables)]
fn __action78<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action79<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, o, _): (usize, BinOp, usize),
    (_, r, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    Expr::BinOp(Box::new(l), o, Box::new(r))
}

#[allow(unused_variables)]
fn __action80<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action81<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, o, _): (usize, BinOp, usize),
    (_, r, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    Expr::BinOp(Box::new(l), o, Box::new(r))
}

#[allow(unused_variables)]
fn __action82<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action83<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, o, _): (usize, BinOp, usize),
    (_, r, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    Expr::BinOp(Box::new(l), o, Box::new(r))
}

#[allow(unused_variables)]
fn __action84<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action85<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, o, _): (usize, BinOp, usize),
    (_, r, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    Expr::BinOp(Box::new(l), o, Box::new(r))
}

#[allow(unused_variables)]
fn __action86<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action87<'input>(
    input: &'input str,
    (_, l, _): (usize, Expr<'input>, usize),
    (_, o, _): (usize, BinOp, usize),
    (_, r, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    Expr::BinOp(Box::new(l), o, Box::new(r))
}

#[allow(unused_variables)]
fn __action88<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action89<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Stmt<'input>>, usize),
    (_, e, _): (usize, core::option::Option<Stmt<'input>>, usize),
) -> Vec<Stmt<'input>> {
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action90<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Arg<'input>>, usize),
    (_, e, _): (usize, core::option::Option<Arg<'input>>, usize),
) -> Vec<Arg<'input>> {
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action91<'input>(
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, t, _): (usize, Vec<Stmt<'input>>, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<Vec<Stmt<'input>>> {
    Spanned {
        node: t,
        span: (l, r),
    }
}

#[allow(unused_variables)]
fn __action92<'input>(
    input: &'input str,
    (_, __0, _): (usize, Spanned<Type>, usize),
) -> core::option::Option<Spanned<Type>> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action93<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Spanned<Type>> {
    None
}

#[allow(unused_variables)]
fn __action94<'input>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Spanned<Type>, usize),
) -> Spanned<Type> {
    __0
}

#[allow(unused_variables)]
fn __action95<'input>(
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, t, _): (usize, Type, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<Type> {
    Spanned {
        node: t,
        span: (l, r),
    }
}

#[allow(unused_variables)]
fn __action96<'input>(
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, t, _): (usize, Vec<Arg<'input>>, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<Vec<Arg<'input>>> {
    Spanned {
        node: t,
        span: (l, r),
    }
}

#[allow(unused_variables)]
fn __action97<'input>(
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, t, _): (usize, &'input str, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<&'input str> {
    Spanned {
        node: t,
        span: (l, r),
    }
}

#[allow(unused_variables)]
fn __action98<'input>(
    input: &'input str,
    (_, l, _): (usize, usize, usize),
    (_, t, _): (usize, Function<'input>, usize),
    (_, r, _): (usize, usize, usize),
) -> Spanned<Function<'input>> {
    Spanned {
        node: t,
        span: (l, r),
    }
}

#[allow(unused_variables)]
fn __action99<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Item<'input>> {
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action100<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Item<'input>>, usize),
) -> alloc::vec::Vec<Item<'input>> {
    v
}

#[allow(unused_variables)]
fn __action101<'input>(
    input: &'input str,
    (_, __0, _): (usize, Item<'input>, usize),
) -> alloc::vec::Vec<Item<'input>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action102<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Item<'input>>, usize),
    (_, e, _): (usize, Item<'input>, usize),
) -> alloc::vec::Vec<Item<'input>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action103<'input>(input: &'input str, __lookbehind: &usize, __lookahead: &usize) -> usize {
    __lookbehind.clone()
}

#[allow(unused_variables)]
fn __action104<'input>(input: &'input str, __lookbehind: &usize, __lookahead: &usize) -> usize {
    __lookahead.clone()
}

#[allow(unused_variables)]
fn __action105<'input>(
    input: &'input str,
    (_, __0, _): (usize, Arg<'input>, usize),
) -> core::option::Option<Arg<'input>> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action106<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Arg<'input>> {
    None
}

#[allow(unused_variables)]
fn __action107<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Arg<'input>> {
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action108<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Arg<'input>>, usize),
) -> alloc::vec::Vec<Arg<'input>> {
    v
}

#[allow(unused_variables)]
fn __action109<'input>(
    input: &'input str,
    (_, __0, _): (usize, Arg<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Arg<'input> {
    __0
}

#[allow(unused_variables)]
fn __action110<'input>(
    input: &'input str,
    (_, __0, _): (usize, Stmt<'input>, usize),
) -> core::option::Option<Stmt<'input>> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action111<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Stmt<'input>> {
    None
}

#[allow(unused_variables)]
fn __action112<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Stmt<'input>> {
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action113<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Stmt<'input>>, usize),
) -> alloc::vec::Vec<Stmt<'input>> {
    v
}

#[allow(unused_variables)]
fn __action114<'input>(
    input: &'input str,
    (_, __0, _): (usize, Stmt<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Stmt<'input> {
    __0
}

#[allow(unused_variables)]
fn __action115<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> core::option::Option<Expr<'input>> {
    Some(__0)
}

#[allow(unused_variables)]
fn __action116<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Expr<'input>> {
    None
}

#[allow(unused_variables)]
fn __action117<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Expr<'input>> {
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action118<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Expr<'input>>, usize),
) -> alloc::vec::Vec<Expr<'input>> {
    v
}

#[allow(unused_variables)]
fn __action119<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Expr<'input> {
    __0
}

#[allow(unused_variables)]
fn __action120<'input>(
    input: &'input str,
    (_, __0, _): (usize, Expr<'input>, usize),
) -> alloc::vec::Vec<Expr<'input>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action121<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Expr<'input>>, usize),
    (_, e, _): (usize, Expr<'input>, usize),
) -> alloc::vec::Vec<Expr<'input>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action122<'input>(
    input: &'input str,
    (_, __0, _): (usize, Stmt<'input>, usize),
) -> alloc::vec::Vec<Stmt<'input>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action123<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Stmt<'input>>, usize),
    (_, e, _): (usize, Stmt<'input>, usize),
) -> alloc::vec::Vec<Stmt<'input>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action124<'input>(
    input: &'input str,
    (_, __0, _): (usize, Arg<'input>, usize),
) -> alloc::vec::Vec<Arg<'input>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action125<'input>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Arg<'input>>, usize),
    (_, e, _): (usize, Arg<'input>, usize),
) -> alloc::vec::Vec<Arg<'input>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action126<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Spanned<Type>, usize),
) -> core::option::Option<Spanned<Type>> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action94(input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action92(input, __temp0)
}

#[allow(unused_variables)]
fn __action127<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Spanned<&'input str>, usize),
    __2: (usize, Spanned<Vec<Arg<'input>>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Spanned<Type>, usize),
    __5: (usize, Spanned<Vec<Stmt<'input>>>, usize),
) -> Function<'input> {
    let __start0 = __3.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action126(input, __3, __4);
    let __temp0 = (__start0, __temp0, __end0);
    __action7(input, __0, __1, __2, __temp0, __5)
}

#[allow(unused_variables)]
fn __action128<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Spanned<&'input str>, usize),
    __2: (usize, Spanned<Vec<Arg<'input>>>, usize),
    __3: (usize, Spanned<Vec<Stmt<'input>>>, usize),
) -> Function<'input> {
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action93(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action7(input, __0, __1, __2, __temp0, __3)
}

#[allow(unused_variables)]
fn __action129<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Vec<Stmt<'input>>, usize),
) -> core::option::Option<Vec<Stmt<'input>>> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action75(input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action73(input, __temp0)
}

#[allow(unused_variables)]
fn __action130<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Box<Expr<'input>>, usize),
    __2: (usize, Vec<Stmt<'input>>, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, Vec<Stmt<'input>>, usize),
) -> Expr<'input> {
    let __start0 = __3.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action129(input, __3, __4);
    let __temp0 = (__start0, __temp0, __end0);
    __action33(input, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
fn __action131<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Box<Expr<'input>>, usize),
    __2: (usize, Vec<Stmt<'input>>, usize),
) -> Expr<'input> {
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action74(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action33(input, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
fn __action132<'input>(
    input: &'input str,
    __0: (usize, Arg<'input>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Arg<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action109(input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action124(input, __temp0)
}

#[allow(unused_variables)]
fn __action133<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Arg<'input>>, usize),
    __1: (usize, Arg<'input>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Arg<'input>> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action109(input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action125(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action134<'input>(
    input: &'input str,
    __0: (usize, core::option::Option<Arg<'input>>, usize),
) -> Vec<Arg<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action107(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action90(input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action135<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Arg<'input>>, usize),
    __1: (usize, core::option::Option<Arg<'input>>, usize),
) -> Vec<Arg<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action108(input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action90(input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action136<'input>(
    input: &'input str,
    __0: (usize, Expr<'input>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Expr<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action119(input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action120(input, __temp0)
}

#[allow(unused_variables)]
fn __action137<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr<'input>>, usize),
    __1: (usize, Expr<'input>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Expr<'input>> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action119(input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action121(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action138<'input>(
    input: &'input str,
    __0: (usize, core::option::Option<Expr<'input>>, usize),
) -> Vec<Expr<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action117(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action76(input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action139<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr<'input>>, usize),
    __1: (usize, core::option::Option<Expr<'input>>, usize),
) -> Vec<Expr<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action118(input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action76(input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action140<'input>(
    input: &'input str,
    __0: (usize, Stmt<'input>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Stmt<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action114(input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action122(input, __temp0)
}

#[allow(unused_variables)]
fn __action141<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Stmt<'input>>, usize),
    __1: (usize, Stmt<'input>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Stmt<'input>> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action114(input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action123(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action142<'input>(
    input: &'input str,
    __0: (usize, core::option::Option<Stmt<'input>>, usize),
) -> Vec<Stmt<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action112(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action89(input, __temp0, __0)
}

#[allow(unused_variables)]
fn __action143<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Stmt<'input>>, usize),
    __1: (usize, core::option::Option<Stmt<'input>>, usize),
) -> Vec<Stmt<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action113(input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action89(input, __temp0, __1)
}

#[allow(unused_variables)]
fn __action144<'input>(
    input: &'input str,
    __0: (usize, Vec<Arg<'input>>, usize),
    __1: (usize, usize, usize),
) -> Spanned<Vec<Arg<'input>>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action104(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action96(input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action145<'input>(
    input: &'input str,
    __0: (usize, Vec<Stmt<'input>>, usize),
    __1: (usize, usize, usize),
) -> Spanned<Vec<Stmt<'input>>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action104(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action91(input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action146<'input>(
    input: &'input str,
    __0: (usize, Function<'input>, usize),
    __1: (usize, usize, usize),
) -> Spanned<Function<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action104(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action98(input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action147<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Spanned<&'input str> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action104(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action97(input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action148<'input>(
    input: &'input str,
    __0: (usize, Type, usize),
    __1: (usize, usize, usize),
) -> Spanned<Type> {
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action104(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action95(input, __temp0, __0, __1)
}

#[allow(unused_variables)]
fn __action149<'input>(
    input: &'input str,
    __0: (usize, Vec<Arg<'input>>, usize),
) -> Spanned<Vec<Arg<'input>>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action144(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action150<'input>(
    input: &'input str,
    __0: (usize, Vec<Stmt<'input>>, usize),
) -> Spanned<Vec<Stmt<'input>>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action145(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action151<'input>(
    input: &'input str,
    __0: (usize, Function<'input>, usize),
) -> Spanned<Function<'input>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action146(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action152<'input>(
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Spanned<&'input str> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action147(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action153<'input>(input: &'input str, __0: (usize, Type, usize)) -> Spanned<Type> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action148(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action154<'input>(input: &'input str, __0: (usize, Arg<'input>, usize)) -> Vec<Arg<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action105(input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action134(input, __temp0)
}

#[allow(unused_variables)]
fn __action155<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Arg<'input>> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action106(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action134(input, __temp0)
}

#[allow(unused_variables)]
fn __action156<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Arg<'input>>, usize),
    __1: (usize, Arg<'input>, usize),
) -> Vec<Arg<'input>> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action105(input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action135(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action157<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Arg<'input>>, usize),
) -> Vec<Arg<'input>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action106(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action135(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action158<'input>(input: &'input str, __0: (usize, Expr<'input>, usize)) -> Vec<Expr<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action115(input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action138(input, __temp0)
}

#[allow(unused_variables)]
fn __action159<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Expr<'input>> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action116(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action138(input, __temp0)
}

#[allow(unused_variables)]
fn __action160<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr<'input>>, usize),
    __1: (usize, Expr<'input>, usize),
) -> Vec<Expr<'input>> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action115(input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action139(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action161<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Expr<'input>>, usize),
) -> Vec<Expr<'input>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action116(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action139(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action162<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Program<'input> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action99(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action5(input, __temp0)
}

#[allow(unused_variables)]
fn __action163<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Item<'input>>, usize),
) -> Program<'input> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action100(input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action5(input, __temp0)
}

#[allow(unused_variables)]
fn __action164<'input>(input: &'input str, __0: (usize, Stmt<'input>, usize)) -> Vec<Stmt<'input>> {
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action110(input, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action142(input, __temp0)
}

#[allow(unused_variables)]
fn __action165<'input>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Stmt<'input>> {
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action111(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action142(input, __temp0)
}

#[allow(unused_variables)]
fn __action166<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Stmt<'input>>, usize),
    __1: (usize, Stmt<'input>, usize),
) -> Vec<Stmt<'input>> {
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action110(input, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action143(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action167<'input>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Stmt<'input>>, usize),
) -> Vec<Stmt<'input>> {
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action111(input, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action143(input, __0, __temp0)
}

pub trait __ToTriple<'input> {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
    >;
}

impl<'input> __ToTriple<'input> for (usize, Token<'input>, usize) {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
    > {
        Ok(value)
    }
}
impl<'input> __ToTriple<'input> for Result<(usize, Token<'input>, usize), &'static str> {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, Token<'input>, usize),
        __lalrpop_util::ParseError<usize, Token<'input>, &'static str>,
    > {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
